const { PrismaClient } = require('@prisma/client');

async function testNotificationSystem() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.userProfile.findMany();
    const today = new Date().toDateString();
    
    console.log(`–î–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è: ${today}\n`);
    
    users.forEach(user => {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.profileName} (ID: ${user.telegramId})`);
      console.log(`   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: ${user.lastSmartRepeatDate || '–Ω–∏–∫–æ–≥–¥–∞'}`);
      
      const didSmartRepeatToday = user.lastSmartRepeatDate === today;
      console.log(`   - –ü—Ä–æ—à–µ–ª —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è: ${didSmartRepeatToday ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   - –ë—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${didSmartRepeatToday ? '–ù–ï–¢' : '–î–ê'}`);
      console.log('');
    });
    
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–±—Ä–æ—Å–∏–º –¥–∞—Ç—É —É–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–±—Ä–æ—Å: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ù—É—Ä–±–æ–ª–∞—Ç—É lastSmartRepeatDate –Ω–∞ –≤—á–µ—Ä–∞');
    
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayString = yesterday.toDateString();
    
    await prisma.userProfile.updateMany({
      where: { profileName: '–ù—É—Ä–±–æ–ª–∞—Ç' },
      data: { lastSmartRepeatDate: yesterdayString }
    });
    
    console.log(`   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${yesterdayString}`);
    console.log('   - –¢–µ–ø–µ—Ä—å –ù—É—Ä–±–æ–ª–∞—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:');
    const updatedUsers = await prisma.userProfile.findMany();
    
    updatedUsers.forEach(user => {
      console.log(`üë§ ${user.profileName}: ${user.lastSmartRepeatDate || '–Ω–∏–∫–æ–≥–¥–∞'}`);
      const willReceiveNotifications = user.lastSmartRepeatDate !== today;
      console.log(`   - –ü–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${willReceiveNotifications ? '–î–ê' : '–ù–ï–¢'}`);
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testNotificationSystem();
