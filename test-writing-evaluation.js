// –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–∏—Å—å–º–∞ —Å –Ω–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

const axios = require('axios');

// –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–Ω—è B1-B2)
const testText = `
Today I want to write about importance of learning English language in modern world. English is very popular language and many people around the world speak it. In my opinion, English is essential for several reasons.

First of all, English helps us to communicate with people from different countries. When I travel, I can speak English with local people and understand them better. This is very useful for making new friends and learning about different cultures.

Secondly, English is important for career development. Many international companies require employees who can speak English fluently. If you know English well, you have more job opportunities and can work in multinational corporations.

Furthermore, English gives us access to information. Most of the content on internet is in English. Scientific articles, news, entertainment - everything is available in English. Without English, we miss a lot of important information.

In conclusion, I believe that learning English is crucial for personal and professional development. It opens many doors and helps us to connect with the global community. Everyone should try to improve their English skills because it will benefit them in many ways.
`;

async function testWritingEvaluation() {
  console.log('üß™ TESTING WRITING EVALUATION SYSTEM');
  console.log('=====================================\n');
  
  console.log('üìù Test Text (B1-B2 level):');
  console.log(testText.trim());
  console.log('\nü§ñ Sending to GPT for personalized feedback...\n');
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –±–æ—Ç–∞
    const improvementPrompt = `
–¢–´: –≠–∫—Å–ø–µ—Ä—Ç IELTS Writing, —É–ª—É—á—à–∞–µ—à—å —Ç–µ–∫—Å—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –¥–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É

–ó–ê–î–ê–ß–ê:
1. –£–ª—É—á—à–∏ —Ç–µ–∫—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, —É–ª—É—á—à–∏ —Å—Ç–∏–ª—å, –¥–æ–±–∞–≤—å —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å)
2. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
3. –í—ã–¥–µ–ª–∏ 3-5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "improved_text": "—É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
  "personalized_feedback": {
    "clarity_focus": "üí° –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —è—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ–∫—É—Å–µ",
    "flow_rhythm": "üé¢ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø–æ—Ç–æ–∫–µ –∏ —Ä–∏—Ç–º–µ", 
    "tone_engagement": "üéØ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ç–æ–Ω–µ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏",
    "development_depth": "üß† –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏–¥–µ–π",
    "precision_ideas": "üèóÔ∏è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π"
  },
  "vocabulary_words": [
    {"word": "—Å–ª–æ–≤–æ", "translation": "–ø–µ—Ä–µ–≤–æ–¥", "example": "–ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"}
  ]
}

–í–ê–ñ–ù–û:
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –í–°–ï —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è: improved_text, personalized_feedback (—Å –í–°–ï–ú–ò 5 –ø–æ–¥–ø–æ–ª—è–º–∏), vocabulary_words
- improved_text: –¢–û–õ–¨–ö–û –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–±–µ–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤!)
- personalized_feedback: –∫–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- vocabulary_words: –≤—ã–±–µ—Ä–∏ 3-5 –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

–ü–†–ò–ú–ï–† –û–¢–í–ï–¢–ê:
{
  "improved_text": "Your improved English text here without any Russian words",
  "personalized_feedback": {
    "clarity_focus": "üí° –í–∞—à–∏ –∏–¥–µ–∏ —è—Å–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∑–∏—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞.",
    "flow_rhythm": "üé¢ –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞! –í–∞—Ä—å–∏—Ä—É–π—Ç–µ –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∏—Ç–º–∞ —á—Ç–µ–Ω–∏—è.",
    "tone_engagement": "üéØ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
    "development_depth": "üß† –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é –∏–¥–µ—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
    "precision_ideas": "üèóÔ∏è –•–æ—Ä–æ—à–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Å–ª–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ."
  },
  "vocabulary_words": [
    {"word": "example", "translation": "–ø—Ä–∏–º–µ—Ä", "example": "This is a good example."}
  ]
}

–¢–ï–ö–°–¢ –°–¢–£–î–ï–ù–¢–ê:
${testText.trim()}`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: improvementPrompt }],
      temperature: 0.7,
      max_tokens: 2000
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const gptResponse = response.data.choices[0].message.content;
    console.log('üì§ Raw GPT Response:');
    console.log('-------------------');
    console.log(gptResponse);
    console.log('\nüîç Parsing JSON...\n');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–∏–Ω–≥
    let improvementResponse = gptResponse.trim();
    let improvementData;
    
    try {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      if (!improvementResponse.startsWith('{') || !improvementResponse.endsWith('}')) {
        console.log('‚ö†Ô∏è  Response does not start/end with braces, trying to extract JSON');
        const jsonMatch = improvementResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          improvementResponse = jsonMatch[0];
          console.log('‚úÖ Extracted JSON from text');
        } else {
          throw new Error('No valid JSON structure found');
        }
      }
      
      improvementData = JSON.parse(improvementResponse);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!improvementData.improved_text || typeof improvementData.improved_text !== 'string') {
        throw new Error('Missing or invalid improved_text field');
      }
      
      if (!improvementData.personalized_feedback || typeof improvementData.personalized_feedback !== 'object') {
        throw new Error('Missing or invalid personalized_feedback field');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
      const requiredFeedbackBlocks = ['clarity_focus', 'flow_rhythm', 'tone_engagement', 'development_depth', 'precision_ideas'];
      let missingBlocks = 0;
      
      for (const block of requiredFeedbackBlocks) {
        if (!improvementData.personalized_feedback[block] || typeof improvementData.personalized_feedback[block] !== 'string') {
          console.log(`‚ö†Ô∏è  Missing or invalid ${block} in personalized_feedback`);
          improvementData.personalized_feedback[block] = "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.";
          missingBlocks++;
        }
      }
      
      if (!Array.isArray(improvementData.vocabulary_words)) {
        console.log('‚ö†Ô∏è  vocabulary_words is not an array, creating empty array');
        improvementData.vocabulary_words = [];
      }
      
      console.log('‚úÖ JSON parsed and validated successfully!');
      console.log(`üìä Missing blocks fixed: ${missingBlocks}`);
      console.log(`üìö Vocabulary words: ${improvementData.vocabulary_words.length}`);
      
    } catch (e1) {
      console.log(`‚ùå Primary parsing failed: ${e1.message}`);
      console.log('üîÑ Using fallback data...');
      
      improvementData = {
        improved_text: "Sorry, couldn't generate improved version due to technical issues.",
        personalized_feedback: {
          clarity_focus: "üí° –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —è—Å–Ω–æ—Å—Ç–∏.",
          flow_rhythm: "üé¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∏—Ç–º–∞.",
          tone_engagement: "üéØ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ª–∏—á–Ω–æ–≥–æ –º–Ω–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–µ–π –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏.",
          development_depth: "üß† –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∏–¥–µ–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
          precision_ideas: "üèóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ–±—â–∏—Ö —Å–ª–æ–≤."
        },
        vocabulary_words: []
      };
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤ –±–æ—Ç–µ
    console.log('\nüéØ FINAL RESULT (as user would see):');
    console.log('=====================================\n');
    
    console.log('üìÑ IMPROVED TEXT:');
    console.log('------------------');
    console.log(improvementData.improved_text);
    console.log('\n');
    
    console.log('üéØ PERSONALIZED FEEDBACK:');
    console.log('---------------------------');
    console.log('üí° Clarity & Focus:', improvementData.personalized_feedback.clarity_focus);
    console.log('üé¢ Flow & Rhythm:', improvementData.personalized_feedback.flow_rhythm);
    console.log('üéØ Tone & Engagement:', improvementData.personalized_feedback.tone_engagement);
    console.log('üß† Development & Depth:', improvementData.personalized_feedback.development_depth);
    console.log('üèóÔ∏è Precision & Ideas:', improvementData.personalized_feedback.precision_ideas);
    console.log('\n');
    
    console.log('üìö VOCABULARY WORDS:');
    console.log('---------------------');
    if (improvementData.vocabulary_words && improvementData.vocabulary_words.length > 0) {
      improvementData.vocabulary_words.forEach((vocab, index) => {
        console.log(`${index + 1}. ${vocab.word} - ${vocab.translation}`);
        if (vocab.example) console.log(`   Example: ${vocab.example}`);
      });
    } else {
      console.log('No vocabulary words provided');
    }
    
    console.log('\n‚úÖ TEST COMPLETED SUCCESSFULLY!');
    console.log('üéâ New personalized feedback system is working!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testWritingEvaluation();