const axios = require('axios');
require('dotenv').config();

async function testCompleteStage2Flow() {
  console.log('=== TESTING COMPLETE STAGE 2 FLOW ===\n');

  // B1 —É—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—Å—Ç —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
  const testText = `I think working at night is better for me. I go to bed late and wake up late. My friends says this is bad but I don't think so. I can work good at night because nobody disturb me. Also the house is quiet and I can focus more better. In the morning I am tired and cannot concentrate proper. So I prefer night time for working. Maybe in future I will become morning person.`;

  console.log('üìù Test text (B1 level with errors):');
  console.log(testText);
  console.log('\n' + '='.repeat(60) + '\n');

  // –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
  console.log('üîç STAGE 1: Analyzing errors with GPT-5...');
  
  const analysisPrompt = `Find grammar errors in this English text. Return only JSON:

{
  "errors": [
    {
      "title": "Error type",
      "rule": "Grammar rule", 
      "examples": [
        {
          "from": "wrong text",
          "to": "correct text"
        }
      ]
    }
  ]
}`;

  try {
    const analysisResponse = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-5',
      messages: [
        { role: 'system', content: analysisPrompt },
        { role: 'user', content: testText }
      ],
      temperature: 1,
      max_completion_tokens: 5000
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('Full API response:', JSON.stringify(analysisResponse.data, null, 2));
    const analysisContent = analysisResponse.data.choices[0].message.content.trim();
    console.log('Raw analysis response:', analysisContent);
    console.log('Response length:', analysisContent.length);
    
    if (!analysisContent || analysisContent.length === 0) {
      throw new Error('Empty response from GPT-5 analysis');
    }
    
    const analysis = JSON.parse(analysisContent);
    
    console.log('‚úÖ Analysis completed!');
    console.log(`Errors found: ${analysis.errors?.length || 0}`);
    console.log('\n' + '='.repeat(60) + '\n');

    // –≠–¢–ê–ü 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    console.log('üß† STAGE 2: Generating personalized quiz...');
    
    const quizPrompt = `–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 3 Find Hidden Error + 3 Spot & Fix + 4 Mini-dialogs

{
  "quiz_sections": [
    {
      "section_title": "üß† –ß–∞—Å—Ç—å 1 ‚Äî Find the Hidden Error (–ù–∞–π–¥–∏ –æ—à–∏–±–∫—É)",
      "section_description": "(–†–∞–∑–≤–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∏ —á—É–≤—Å—Ç–≤–æ —è–∑—ã–∫–∞)",
      "questions": [
        {
          "type": "multiple_choice",
          "question_text": "Choose the correct sentence:",
          "options": ["A) –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", "B) –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚úÖ", "C) –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"],
          "correct_answer": "B",
          "explanation": "üí° Rule: –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ"
        }
      ]
    },
    {
      "section_title": "‚úçÔ∏è –ß–∞—Å—Ç—å 2 ‚Äî Spot & Fix (–ò—Å–ø—Ä–∞–≤—å –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å)",
      "section_description": "(–†–∞–∑–≤–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)",
      "questions": [
        {
          "type": "text_input",
          "question_text": "Fix the sentence:",
          "wrong_example": "‚ùå –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
          "input_prompt": "‚úÖ ______________________________",
          "tip": "üí¨ Tip: –ø–æ–¥—Å–∫–∞–∑–∫–∞",
          "correct_answer": "–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
          "explanation": "üß© Answer: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚úÖ"
        }
      ]
    },
    {
      "section_title": "üí¨ –ß–∞—Å—Ç—å 3 ‚Äî Mini-dialogs (–î–∏–∞–ª–æ–≥–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏)",
      "section_description": "(–ó–∞–∫—Ä–µ–ø–ª—è–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—â–µ–Ω–∏—è ‚Äî –∫–∞–∫ –≤ IELTS Speaking)",
      "questions": [
        {
          "type": "multiple_choice",
          "question_text": "‚Äî –í–æ–ø—Ä–æ—Å?\\n‚Äî I ______ –æ—Ç–≤–µ—Ç.",
          "options": ["A) –≤–∞—Ä–∏–∞–Ω—Ç", "B) –≤–∞—Ä–∏–∞–Ω—Ç", "C) –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚úÖ", "D) –≤–∞—Ä–∏–∞–Ω—Ç"],
          "correct_answer": "C",
          "explanation": "üí° Rule: –ø—Ä–∞–≤–∏–ª–æ"
        }
      ]
    }
  ]
}`;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è GPT
    let errorsInfo = '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n';
    analysis.errors.forEach((error, index) => {
      errorsInfo += `${index + 1}. ${error.title}\n`;
      if (error.examples && error.examples.length > 0) {
        error.examples.forEach(example => {
          errorsInfo += `   ‚ùå ${example.from}\n   ‚úÖ ${example.to}\n`;
        });
      }
      errorsInfo += `   –ü—Ä–∞–≤–∏–ª–æ: ${error.rule}\n\n`;
    });

    const quizResponse = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-5',
      messages: [
        { role: 'system', content: quizPrompt },
        { role: 'user', content: errorsInfo }
      ],
      temperature: 1,
      max_completion_tokens: 4000
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const quizContent = quizResponse.data.choices[0].message.content.trim();
    console.log('Raw quiz response length:', quizContent.length);
    
    if (quizContent.length === 0) {
      throw new Error('Empty response from GPT-5');
    }

    const quiz = JSON.parse(quizContent);
    
    console.log('‚úÖ Quiz generated successfully!');
    console.log(`Sections: ${quiz.quiz_sections?.length || 0}`);
    console.log('\n' + '='.repeat(60) + '\n');

    // –≠–¢–ê–ü 3: –ü–æ–∫–∞–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–∞
    console.log('============================================================\n');
    console.log('üéØ STAGE 2 (Part 3): Quiz structure preview:\n');
    
    if (quiz.quiz_sections) {
      let totalQuestions = 0;
      quiz.quiz_sections.forEach((section, i) => {
        console.log(`\n${section.section_title}`);
        console.log(section.section_description);
        
        if (section.questions) {
          totalQuestions += section.questions.length;
          section.questions.forEach((q, j) => {
            console.log(`\n  Question ${j + 1}:`);
            console.log(`  ${q.question_text}`);
            
            if (q.type === 'multiple_choice' && q.options) {
              q.options.forEach(option => {
                console.log(`    ${option}`);
              });
            } else if (q.type === 'text_input') {
              console.log(`  ${q.wrong_example}`);
              console.log(`  ${q.input_prompt}`);
              console.log(`  ${q.tip}`);
            }
            
            console.log(`  ${q.explanation}`);
          });
        }
      });
      
      console.log(`\nüìä Total questions: ${totalQuestions}`);
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üéâ SUCCESS: Complete Stage 2 flow tested successfully!');

  } catch (error) {
    console.error('‚ùå ERROR:', error.message);
    if (error.response) {
      console.error('API Status:', error.response.status);
      console.error('API Error:', error.response.data);
    }
  }
}

testCompleteStage2Flow();