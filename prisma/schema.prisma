generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id                  Int      @id @default(autoincrement())
  telegramId          String
  profileName         String
  xp                  Int      @default(0)
  level               Int      @default(1)
  loginStreak         Int      @default(0)
  lastBonusDate       String?
  lastSmartRepeatDate String?
  reminderTime        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastStudyDate       String?
  studyStreak         Int      @default(0)
  writingTopicIndex   Int      @default(0)

  @@unique([telegramId, profileName])
  @@map("user_profiles")
}

model Word {
  id          Int      @id @default(autoincrement())
  profile     String
  word        String
  translation String
  section     String?
  correct     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  audioData   Bytes?

  @@map("words")
}

model bbc_episodes {
  id                Int                 @id @default(autoincrement())
  bbcId             String              @unique
  title             String
  mp3Url            String
  pageUrl           String
  publishDate       DateTime
  transcript        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  bbc_vocab         bbc_vocab[]
  user_bbc_progress user_bbc_progress[]
}

model bbc_vocab {
  id            Int          @id @default(autoincrement())
  episodeId     Int
  term          String
  definition    String
  translationRu String
  createdAt     DateTime     @default(now())
  bbc_episodes  bbc_episodes @relation(fields: [episodeId], references: [id], onDelete: Cascade)
}

model birthdays {
  id            Int             @id @default(autoincrement())
  user_id       BigInt?
  first_name    String          @db.VarChar(255)
  last_name     String          @db.VarChar(255)
  birth_date    DateTime        @db.Date
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  users         users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications notifications[]

  @@index([birth_date], map: "idx_birthdays_date")
  @@index([user_id], map: "idx_birthdays_user_id")
}

model daily_routines {
  id            Int             @id @default(autoincrement())
  user_id       BigInt?
  title         String          @db.VarChar(500)
  routine_time  DateTime        @db.Time(6)
  is_active     Boolean?        @default(true)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  users         users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications notifications[]

  @@index([user_id], map: "idx_routines_user_id")
}

model events {
  id                Int              @id @default(autoincrement())
  user_id           BigInt?
  title             String           @db.VarChar(500)
  description       String?
  event_date        DateTime         @db.Date
  event_time        DateTime         @db.Time(6)
  category          String?          @default("medium") @db.VarChar(50)
  notification_type String           @db.VarChar(100)
  is_completed      Boolean?         @default(false)
  created_at        DateTime?        @default(now()) @db.Timestamp(6)
  updated_at        DateTime?        @default(now()) @db.Timestamp(6)
  google_event_id   String?          @db.VarChar(255)
  google_account_id Int?
  google_accounts   google_accounts? @relation(fields: [google_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  notifications     notifications[]

  @@index([event_date], map: "idx_events_date")
  @@index([google_account_id], map: "idx_events_google_account")
  @@index([google_event_id], map: "idx_events_google_id")
  @@index([user_id], map: "idx_events_user_id")
}

model google_accounts {
  id            Int       @id @default(autoincrement())
  user_id       BigInt?
  account_name  String    @db.VarChar(255)
  account_email String    @db.VarChar(255)
  refresh_token String
  access_token  String?
  expires_at    DateTime? @db.Timestamp(6)
  calendar_id   String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  events        events[]
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, account_email])
  @@index([account_email], map: "idx_google_accounts_email")
  @@index([user_id], map: "idx_google_accounts_user")
}

model notifications {
  id                Int             @id @default(autoincrement())
  user_id           BigInt?
  event_id          Int?
  birthday_id       Int?
  routine_id        Int?
  notification_time DateTime        @db.Timestamp(6)
  notification_type String          @db.VarChar(50)
  message           String
  is_sent           Boolean?        @default(false)
  created_at        DateTime?       @default(now()) @db.Timestamp(6)
  birthdays         birthdays?      @relation(fields: [birthday_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  events            events?         @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  daily_routines    daily_routines? @relation(fields: [routine_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_sent], map: "idx_notifications_sent")
  @@index([notification_time], map: "idx_notifications_time")
}

model user_bbc_progress {
  id           Int          @id @default(autoincrement())
  userId       String
  profileName  String
  episodeId    Int
  completed    Boolean      @default(false)
  score        Int          @default(0)
  answers      String
  completedAt  DateTime     @default(now())
  bbc_episodes bbc_episodes @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@unique([userId, profileName, episodeId])
}

model users {
  id              BigInt            @id
  username        String?           @db.VarChar(255)
  first_name      String?           @db.VarChar(255)
  last_name       String?           @db.VarChar(255)
  language_code   String?           @default("ru") @db.VarChar(10)
  timezone        String?           @default("Europe/Moscow") @db.VarChar(50)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  birthdays       birthdays[]
  daily_routines  daily_routines[]
  events          events[]
  google_accounts google_accounts[]
  notifications   notifications[]
}
