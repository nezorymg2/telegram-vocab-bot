console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô\n');

// –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã /words
console.log('1. üìö –ö–æ–º–∞–Ω–¥–∞ /words —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏:');
function simulateWordsCommand(words) {
  const totalWords = words.length;
  const newWords = words.filter(w => (w.correct || 0) <= 2).length;
  const learningWords = words.filter(w => (w.correct || 0) >= 3 && (w.correct || 0) <= 4).length;
  const learnedWords = words.filter(w => (w.correct || 0) >= 5).length;

  let message = `üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å: ${totalWords} —Å–ª–æ–≤\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüî¥ –ù–æ–≤—ã–µ: ${newWords} | üü° –ò–∑—É—á–∞–µ–º—ã–µ: ${learningWords} | üü¢ –ò–∑—É—á–µ–Ω–Ω—ã–µ: ${learnedWords}\n\n`;
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  let messages = [];
  let currentMessage = message;
  
  words.forEach(word => {
    const wordLine = `üü¢ ${word.word} ‚Äî ${word.translation}\n`;
    if ((currentMessage + wordLine).length > 200) { // –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
      messages.push(currentMessage);
      currentMessage = '–í–∞—à–∏ —Å–ª–æ–≤–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n';
    }
    currentMessage += wordLine;
  });
  messages.push(currentMessage);
  
  return { totalWords, newWords, learningWords, learnedWords, pages: messages.length };
}

const testWords = Array.from({length: 10}, (_, i) => ({
  word: `word${i+1}`,
  translation: `–ø–µ—Ä–µ–≤–æ–¥${i+1}`,
  correct: Math.floor(Math.random() * 7) // 0-6
}));

const result = simulateWordsCommand(testWords);
console.log(`   ‚úÖ –í—Å–µ–≥–æ: ${result.totalWords}, –ù–æ–≤—ã–µ: ${result.newWords}, –ò–∑—É—á–∞–µ–º—ã–µ: ${result.learningWords}, –ò–∑—É—á–µ–Ω–Ω—ã–µ: ${result.learnedWords}`);
console.log(`   ‚úÖ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${result.pages} —Å—Ç—Ä–∞–Ω–∏—Ü(—ã)`);

// –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ Stage 2
console.log('\n2. üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ Stage 2:');
function simulateStage2Skip(quizWords) {
  const words = quizWords.slice(0, 5);
  const stage2VocabularyWords = words.map(word => ({
    word: word,
    translation: `–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${word}`,
    example: `–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å ${word}.`
  }));
  
  console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${stage2VocabularyWords.length} —Å–ª–æ–≤ –¥–ª—è Stage 5`);
  return stage2VocabularyWords;
}

const mockQuizWords = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig'];
const savedWords = simulateStage2Skip(mockQuizWords);

// –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ finishSmartRepeat
console.log('\n3. üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Smart Repeat:');
function simulateFinishSmartRepeat(session) {
  // –ü–†–ê–í–ò–õ–¨–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –î–û –æ—á–∏—Å—Ç–∫–∏
  const savedVocabularyWords = session.stage2VocabularyWords || [];
  
  // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
  delete session.stage2VocabularyWords;
  delete session.currentQuizSession;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
  if (savedVocabularyWords && savedVocabularyWords.length > 0) {
    console.log(`   ‚úÖ Stage 5 –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å ${savedVocabularyWords.length} —Å–ª–æ–≤–∞–º–∏`);
    return true;
  } else {
    console.log(`   ‚ùå Stage 5 –Ω–µ –ø–æ–ª—É—á–∏—Ç —Å–ª–æ–≤–∞`);
    return false;
  }
}

const mockSession = { stage2VocabularyWords: savedWords, currentQuizSession: {} };
const stage5WillWork = simulateFinishSmartRepeat(mockSession);

console.log('\n4. üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞—Ç—ã:');
const fs = require('fs');
try {
  const data = JSON.parse(fs.readFileSync('./db.json', 'utf8'));
  let dateReset = false;
  
  Object.keys(data).forEach(userId => {
    Object.keys(data[userId]).forEach(profile => {
      if (profile === '–ù—É—Ä–±–æ–ª–∞—Ç') {
        dateReset = !data[userId][profile].lastSmartRepeatDate;
      }
    });
  });
  
  console.log(`   ‚úÖ –î–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞: ${dateReset}`);
} catch (error) {
  console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É: ${error.message}`);
}

console.log('\nüéâ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
console.log('   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /words: —É–ª—É—á—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º');
console.log('   ‚úÖ Stage 2 skip: —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è Stage 5');  
console.log('   ‚úÖ finishSmartRepeat: –ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ Stage 5');
console.log('   ‚úÖ –î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞');
console.log('\nüöÄ –í–°–ï –ì–û–¢–û–í–û! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');