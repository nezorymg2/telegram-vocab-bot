const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
    
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    const totalWords = await prisma.word.count();
    console.log(`üìä –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: ${totalWords}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ–≤
    if (totalWords > 0) {
      console.log('\nüìö –ü–µ—Ä–≤—ã–µ 10 —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã:');
      const words = await prisma.word.findMany({
        take: 10,
        select: {
          id: true,
          word: true,
          translation: true,
          section: true
        }
      });
      
      words.forEach((word, index) => {
        console.log(`${index + 1}. ${word.word} - ${word.translation} (${word.section})`);
      });
    } else {
      console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
    const sections = await prisma.word.findMany({
      select: { section: true },
      distinct: ['section']
    });
    console.log(`\nüìÇ –†–∞–∑–¥–µ–ª—ã –≤ –±–∞–∑–µ: ${sections.map(s => s.section).join(', ')}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('–î–µ—Ç–∞–ª–∏:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();
