// –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
const axios = require('axios');
require('dotenv').config();

async function testOpenAIAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ OpenAI API...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç OPENAI_API_KEY=...');
    return;
  }

  console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω');
  console.log('üîë –ö–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', process.env.OPENAI_API_KEY.substring(0, 10) + '...');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ GPT-3.5
  console.log('\nüìù –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ GPT-3.5-turbo');
  
  try {
    const simplePrompt = '–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ –ø–æ–≥–æ–¥—É —Å–µ–≥–æ–¥–Ω—è.';
    
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: simplePrompt }],
      temperature: 0.7,
      max_tokens: 100
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    console.log('‚úÖ GPT-3.5 –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìÑ –û—Ç–≤–µ—Ç:', response.data.choices[0].message.content);
    console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:', response.data.usage);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å GPT-3.5:');
    console.error('   –°—Ç–∞—Ç—É—Å:', error.response?.status || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    if (error.response?.data) {
      console.error('   –î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }

  // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –∫ GPT-4o
  console.log('\nüìù –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å –∫ GPT-4o');
  
  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4o',
      messages: [{ role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' }],
      temperature: 0.7,
      max_tokens: 50
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    console.log('‚úÖ GPT-4o –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìÑ –û—Ç–≤–µ—Ç:', response.data.choices[0].message.content);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å GPT-4o:');
    console.error('   –°—Ç–∞—Ç—É—Å:', error.response?.status || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    if (error.response?.data) {
      console.error('   –î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }

  // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –∫ GPT-5 (–∫–∞–∫ –≤ –±–æ—Ç–µ)
  console.log('\nüìù –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –∫ GPT-5 (–∫–∞–∫ –≤ –±–æ—Ç–µ)');
  
  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-5',
      messages: [
        { 
          role: 'system', 
          content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è IELTS Writing.' 
        },
        { 
          role: 'user', 
          content: 'LANG=ru\\nTEXT=\\nI like to read books. Reading is good for me.' 
        }
      ],
      temperature: 1,
      max_completion_tokens: 100
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    console.log('‚úÖ GPT-5 –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìÑ –û—Ç–≤–µ—Ç:', response.data.choices[0].message.content.substring(0, 200) + '...');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å GPT-5:');
    console.error('   –°—Ç–∞—Ç—É—Å:', error.response?.status || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞');  
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    if (error.response?.data) {
      console.error('   –î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }

  // –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞–¥–∏–∏ 5 (–∫–∞–∫ –≤ –±–æ—Ç–µ)
  console.log('\nüìù –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞–¥–∏–∏ 5');
  
  const storyPrompt = `–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏–∑ 5-8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ç–µ–º—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–í —Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Å–ª–æ–≤–∞: **vital**, **assess**, **competitive**.

–û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "text": "—Ç–µ–∫—Å—Ç",
  "questions": [{"question": "–≤–æ–ø—Ä–æ—Å?", "options": ["a", "b"], "correct_option": "a"}]
}`;

  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: storyPrompt }],
      temperature: 0.8,
      max_tokens: 1000
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–∞!');
    
    const answer = response.data.choices[0].message.content;
    console.log('üìÑ –û—Ç–≤–µ—Ç:', answer.substring(0, 300) + '...');
    
    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      const match = answer.match(/\{[\s\S]*\}/);
      if (match) {
        const parsed = JSON.parse(match[0]);
        console.log('‚úÖ JSON –ø–∞—Ä—Å–∏—Ç—Å—è —É—Å–ø–µ—à–Ω–æ');
        console.log('üìù –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π:', parsed.text?.length || 0, '—Å–∏–º–≤–æ–ª–æ–≤');
        console.log('‚ùì –í–æ–ø—Ä–æ—Å–æ–≤:', parsed.questions?.length || 0);
      } else {
        console.log('‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    } catch (parseError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:');
    console.error('   –°—Ç–∞—Ç—É—Å:', error.response?.status || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞');
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    if (error.response?.data) {
      console.error('   –î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }

  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testOpenAIAPI().catch(console.error);