const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkAudioCache() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –∫–µ—à–µ
    const audioCount = await prisma.audioCache.count();
    console.log('üìº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –∫–µ—à–µ:', audioCount);
    
    if (audioCount > 0) {
      const sampleAudio = await prisma.audioCache.findMany({ take: 5 });
      console.log('üîä –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤ —Å –∞—É–¥–∏–æ:');
      sampleAudio.forEach(audio => {
        console.log('  -', audio.word);
      });
    } else {
      console.log('‚ö†Ô∏è –ê—É–¥–∏–æ –∫–µ—à –ø—É—Å—Ç–æ–π!');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const words = await prisma.word.findMany({ take: 10 });
    console.log('\nüìö –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    words.forEach(word => {
      console.log('  -', word.word, '‚Üí', word.translation, '(profile:', word.profile + ')');
    });

    // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    const totalWords = await prisma.word.count();
    console.log('\nüìä –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ:', totalWords);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkAudioCache();
