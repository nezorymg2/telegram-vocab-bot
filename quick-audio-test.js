const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

async function quickAudioTest() {
  try {
    console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã...\n');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å gtts
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è gtts...');
    try {
      const gTTS = require('gtts');
      console.log('‚úÖ –ú–æ–¥—É–ª—å gtts –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('‚ùå –ú–æ–¥—É–ª—å gtts –Ω–µ –Ω–∞–π–¥–µ–Ω:', error.message);
      return;
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    try {
      await prisma.$connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ:', error.message);
      return;
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∞—É–¥–∏–æ –∫–µ—à
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∞—É–¥–∏–æ –∫–µ—à...');
    const audioCount = await prisma.audioCache.count();
    console.log(`üìº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –∫–µ—à–µ: ${audioCount}`);
    
    if (audioCount > 0) {
      const sampleAudio = await prisma.audioCache.findMany({ take: 3 });
      console.log('üîä –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤ —Å –∞—É–¥–∏–æ:');
      sampleAudio.forEach(audio => {
        console.log(`   - ${audio.word} (${audio.audioData.length} bytes)`);
      });
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const wordCount = await prisma.word.count();
    console.log(`üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: ${wordCount}`);
    
    if (wordCount > 0) {
      const sampleWords = await prisma.word.findMany({ 
        take: 3, 
        select: { word: true, translation: true, profile: true }
      });
      console.log('üìù –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤:');
      sampleWords.forEach(word => {
        console.log(`   - ${word.word} ‚Üí ${word.translation} (${word.profile})`);
      });
    }
    
    // –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ...');
    const testWord = 'test';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤–∞ "test"
    const existingAudio = await prisma.audioCache.findUnique({
      where: { word: testWord.toLowerCase() }
    });
    
    if (existingAudio) {
      console.log(`‚úÖ –ê—É–¥–∏–æ –¥–ª—è "${testWord}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${existingAudio.audioData.length} bytes)`);
    } else {
      console.log(`üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è "${testWord}"...`);
      
      const gTTS = require('gtts');
      const gtts = new gTTS(testWord, 'en');
      
      try {
        const stream = await gtts.stream();
        const chunks = [];
        
        await new Promise((resolve, reject) => {
          stream.on('data', chunk => chunks.push(chunk));
          stream.on('end', resolve);
          stream.on('error', reject);
        });
        
        const audioBuffer = Buffer.concat(chunks);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await prisma.audioCache.create({
          data: {
            word: testWord.toLowerCase(),
            audioData: audioBuffer
          }
        });
        
        console.log(`‚úÖ –ê—É–¥–∏–æ –¥–ª—è "${testWord}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ (${audioBuffer.length} bytes)`);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: ${error.message}`);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ –∫–µ—à–∞...');
    const finalAudioCount = await prisma.audioCache.count();
    console.log(`üìº –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –∫–µ—à–µ: ${finalAudioCount}`);
    
    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
    if (finalAudioCount > 0) {
      console.log('‚úÖ –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('‚úÖ –í –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–ª—è—Ç—å—Å—è –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–æ–π');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

quickAudioTest();
