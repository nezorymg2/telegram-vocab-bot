// –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ fallback –∞–Ω–∞–ª–∏–∑–∞

console.log('üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI...\n');

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
const testCases = [
  { name: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞', response: '' },
  { name: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã', response: '   ' },
  { name: '–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç', response: 'ok' },
  { name: 'Null –æ—Ç–≤–µ—Ç', response: null },
  { name: 'Undefined –æ—Ç–≤–µ—Ç', response: undefined }
];

console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n');

testCases.forEach((testCase, index) => {
  console.log(`${index + 1}. ${testCase.name}`);
  
  const analysisResponse = testCase.response;
  
  // –õ–æ–≥–∏–∫–∞ –∏–∑ bot.js
  const isEmpty = !analysisResponse || analysisResponse.length < 10;
  
  if (isEmpty) {
    console.log(`   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`);
    console.log(`   ‚úÖ –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω fallback –∞–Ω–∞–ª–∏–∑`);
  } else {
    console.log(`   ‚ùå –ù–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`);
  }
  
  console.log('');
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É fallback –∞–Ω–∞–ª–∏–∑–∞
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã fallback –∞–Ω–∞–ª–∏–∑–∞:\n');

const fallbackAnalysis = {
  band_estimate: "6.0",
  summary: "–í–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£—Ä–æ–≤–µ–Ω—å –ø–∏—Å—å–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–Ω–µ–º—É —É—Ä–æ–≤–Ω—é. –í —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∞–∫ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–∞–∫ –∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.",
  global_advice: "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –ø–∏—Å—å–º–µ, –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ß–∏—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞.",
  errors: [
    {
      from: "I hadn't a lot of motivation",
      to: "I didn't have a lot of motivation",
      rule: "–í –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ 'have' –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞ 'did not' –≤ –ø—Ä–æ—à–µ–¥—à–µ–º –≤—Ä–µ–º–µ–Ω–∏",
      association: "Had –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–ª–∞–≥–æ–ª –≤ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–∏",
      example: "I didn't have time yesterday."
    }
  ],
  drills: [
    {
      title: "Past Simple: –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è —Å 'have'",
      rule: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'didn't have' –¥–ª—è –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è –≤ –ø—Ä–æ—à–µ–¥—à–µ–º –≤—Ä–µ–º–µ–Ω–∏",
      exercises: [
        {
          question: "–í—á–µ—Ä–∞ —É –º–µ–Ω—è –Ω–µ –±—ã–ª–æ –≤—Ä–µ–º–µ–Ω–∏",
          type: "fill",
          text: "Yesterday I ‚ñ¢ ‚ñ¢ time",
          word_count: 2,
          correct_answer: "didn't have",
          accepted: ["didn't have"],
          hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ did not + have"
        }
      ]
    }
  ]
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
const requiredFields = ['band_estimate', 'summary', 'global_advice', 'errors', 'drills'];
const missingFields = requiredFields.filter(field => !fallbackAnalysis.hasOwnProperty(field));

if (missingFields.length === 0) {
  console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
} else {
  console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è:', missingFields);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
console.log('‚úÖ band_estimate - —Å—Ç—Ä–æ–∫–∞:', typeof fallbackAnalysis.band_estimate === 'string' ? '‚úÖ' : '‚ùå');
console.log('‚úÖ summary - —Å—Ç—Ä–æ–∫–∞:', typeof fallbackAnalysis.summary === 'string' ? '‚úÖ' : '‚ùå');
console.log('‚úÖ global_advice - —Å—Ç—Ä–æ–∫–∞:', typeof fallbackAnalysis.global_advice === 'string' ? '‚úÖ' : '‚ùå');
console.log('‚úÖ errors - –º–∞—Å—Å–∏–≤:', Array.isArray(fallbackAnalysis.errors) ? '‚úÖ' : '‚ùå');
console.log('‚úÖ drills - –º–∞—Å—Å–∏–≤:', Array.isArray(fallbackAnalysis.drills) ? '‚úÖ' : '‚ùå');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏
const error = fallbackAnalysis.errors[0];
const errorFields = ['from', 'to', 'rule', 'association', 'example'];
const hasAllErrorFields = errorFields.every(field => error.hasOwnProperty(field));
console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:', hasAllErrorFields ? '‚úÖ' : '‚ùå');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É drill
const drill = fallbackAnalysis.drills[0];
const drillFields = ['title', 'rule', 'exercises'];
const hasAllDrillFields = drillFields.every(field => drill.hasOwnProperty(field));
console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ drill –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:', hasAllDrillFields ? '‚úÖ' : '‚ùå');

console.log('\nüéâ FALLBACK –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
console.log('‚úÖ –ü—Ä–∏ –ø—É—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–µ –æ—Ç OpenAI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑');
console.log('‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É');