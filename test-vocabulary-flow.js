require('dotenv').config();
const { Bot } = require('grammy');

// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
const mockCtx = {
  from: { id: 123456789 },
  reply: async (message, options) => {
    console.log('\nüì§ BOT REPLY:');
    console.log(message);
    if (options?.reply_markup) {
      console.log('üîò BUTTONS:');
      if (options.reply_markup.inline_keyboard) {
        options.reply_markup.inline_keyboard.forEach(row => {
          row.forEach(button => {
            console.log(`  [${button.text}] (${button.callback_data})`);
          });
        });
      }
    }
    console.log('‚îÄ'.repeat(50));
  },
  deleteMessage: async () => {
    console.log('üóë Message deleted');
  },
  answerCallbackQuery: async (message) => {
    console.log(`‚úÖ Callback answered: ${message}`);
  },
  callbackQuery: { data: null }
};

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
const mockSession = {
  profile: 'test_user',
  vocabularyWords: [
    {
      word: 'circadian',
      translation: '—Ü–∏—Ä–∫–∞–¥–Ω—ã–π, —Å—É—Ç–æ—á–Ω—ã–π',
      example: 'My circadian rhythm makes me more alert at night.'
    },
    {
      word: 'nocturnal', 
      translation: '–Ω–æ—á–Ω–æ–π',
      example: 'I follow a nocturnal work pattern that aligns with my peak focus.'
    },
    {
      word: 'lethargic',
      translation: '–≤—è–ª—ã–π, –∞–ø–∞—Ç–∏—á–Ω—ã–π', 
      example: 'Early mornings leave me lethargic and unfocused.'
    },
    {
      word: 'conducive',
      translation: '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É—é—â–∏–π, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—â–∏–π',
      example: 'The late-night quiet is conducive to deep concentration.'
    },
    {
      word: 'immerse',
      translation: '–ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è (–≤–æ —á—Ç–æ-–ª–∏–±–æ)',
      example: 'I can immerse myself in complex tasks without interruptions.'
    }
  ],
  stage2_analysis: {
    errors: [
      { title: 'Subject-verb agreement', rule: 'Test rule' },
      { title: 'Articles', rule: 'Test rule' }
    ]
  }
};

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
async function addWordToUserDictionary(profileName, wordData) {
  console.log(`üìö ADDING WORD TO DICTIONARY:`);
  console.log(`  Profile: ${profileName}`);
  console.log(`  Word: ${wordData.word} - ${wordData.translation}`);
  console.log(`  Example: ${wordData.example}`);
  return Promise.resolve();
}

async function generatePersonalizedQuiz(ctx, session, analysisErrors) {
  console.log('\nüß† GENERATING PERSONALIZED QUIZ...');
  console.log(`Based on ${analysisErrors.errors.length} error types`);
  await ctx.reply('üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º...');
}

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.js
async function startVocabularyAddition(ctx, session, vocabularyWords) {
  try {
    session.vocabularyWords = vocabularyWords;
    session.currentWordIndex = 0;
    session.addedWordsCount = 0;
    
    await showNextVocabularyWord(ctx, session);
    
  } catch (error) {
    console.error('Error in startVocabularyAddition:', error);
    await generatePersonalizedQuiz(ctx, session, session.stage2_analysis);
  }
}

async function showNextVocabularyWord(ctx, session) {
  try {
    if (session.currentWordIndex >= session.vocabularyWords.length) {
      await ctx.reply(`‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å: ${session.addedWordsCount}`);
      
      setTimeout(() => {
        generatePersonalizedQuiz(ctx, session, session.stage2_analysis);
      }, 1500);
      return;
    }
    
    const currentWord = session.vocabularyWords[session.currentWordIndex];
    const wordNumber = session.currentWordIndex + 1;
    const totalWords = session.vocabularyWords.length;
    
    const message = `üìö <b>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ? (${wordNumber}/${totalWords})</b>\n\n` +
                   `<b>${currentWord.word}</b> - ${currentWord.translation}\n` +
                   `<i>${currentWord.example}</i>`;
    
    const keyboard = {
      inline_keyboard: [[
        { text: '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å', callback_data: `add_vocab_${session.currentWordIndex}` },
        { text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip_vocab_${session.currentWordIndex}` }
      ]]
    };
    
    await ctx.reply(message, { 
      parse_mode: 'HTML', 
      reply_markup: keyboard 
    });
    
  } catch (error) {
    console.error('Error in showNextVocabularyWord:', error);
    session.currentWordIndex++;
    await showNextVocabularyWord(ctx, session);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
async function handleVocabularyCallback(ctx, session, data) {
  const wordIndex = parseInt(data.split('_')[2]);
  
  if (wordIndex !== session.currentWordIndex) {
    await ctx.answerCallbackQuery('–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–Ω–æ–ø–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }
  
  const currentWord = session.vocabularyWords[wordIndex];
  
  if (data.startsWith('add_vocab_')) {
    try {
      await addWordToUserDictionary(session.profile, currentWord);
      session.addedWordsCount++;
      await ctx.answerCallbackQuery(`‚úÖ –°–ª–æ–≤–æ "${currentWord.word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!`);
    } catch (error) {
      console.error('Error adding word to dictionary:', error);
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
    }
  } else {
    await ctx.answerCallbackQuery(`‚è≠ –°–ª–æ–≤–æ "${currentWord.word}" –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
  }
  
  session.currentWordIndex++;
  await ctx.deleteMessage();
  await showNextVocabularyWord(ctx, session);
}

// –¢–µ—Å—Ç
async function testVocabularyFlow() {
  console.log('=== TESTING VOCABULARY ADDITION FLOW ===\n');
  
  console.log('üìã Test scenario:');
  console.log('- 5 vocabulary words to process (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)');
  console.log('- User will add 1st and 3rd words, skip 2nd, 4th, and 5th');
  console.log('- Then proceed to personalized quiz\n');
  
  console.log('üöÄ Starting vocabulary addition...\n');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
  await startVocabularyAddition(mockCtx, mockSession, mockSession.vocabularyWords);
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  console.log('\nüë§ USER ACTION: Add first word (circadian)');
  await handleVocabularyCallback(mockCtx, mockSession, 'add_vocab_0');
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  console.log('\nüë§ USER ACTION: Skip second word (nocturnal)');
  await handleVocabularyCallback(mockCtx, mockSession, 'skip_vocab_1');
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  console.log('\nüë§ USER ACTION: Add third word (lethargic)');
  await handleVocabularyCallback(mockCtx, mockSession, 'add_vocab_2');
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  console.log('\nüë§ USER ACTION: Skip fourth word (conducive)');
  await handleVocabularyCallback(mockCtx, mockSession, 'skip_vocab_3');
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  console.log('\nüë§ USER ACTION: Skip fifth word (immerse)');
  await handleVocabularyCallback(mockCtx, mockSession, 'skip_vocab_4');
  
  console.log('\nüéâ VOCABULARY FLOW TEST COMPLETED!');
  console.log(`üìä Final results: ${mockSession.addedWordsCount}/5 words added`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testVocabularyFlow().catch(console.error);