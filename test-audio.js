const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ (–∫–æ–ø–∏—è –∏–∑ bot.js)
async function generateAndCacheAudio(word) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∫–µ—à–µ
    const existing = await prisma.audioCache.findUnique({
      where: { word: word.toLowerCase() }
    });
    if (existing) {
      console.log(`‚úÖ Found cached audio for: "${word}"`);
      return true;
    }

    console.log(`üîÑ Generating audio for: "${word}"`);

    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é gTTS
    const gTTS = require('gtts');
    const gtts = new gTTS(word, 'en');
    
    return new Promise((resolve) => {
      gtts.stream().then(stream => {
        const chunks = [];
        stream.on('data', chunk => chunks.push(chunk));
        stream.on('end', async () => {
          try {
            const audioBuffer = Buffer.concat(chunks);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await prisma.audioCache.create({
              data: {
                word: word.toLowerCase(),
                audioData: audioBuffer
              }
            });
            
            console.log(`‚úÖ Audio cached for: "${word}"`);
            resolve(true);
          } catch (error) {
            console.error(`‚ùå Failed to cache audio for "${word}":`, error.message);
            resolve(false);
          }
        });
        stream.on('error', (error) => {
          console.error(`‚ùå gTTS stream error for "${word}":`, error.message);
          resolve(false);
        });
      }).catch(error => {
        console.error(`‚ùå gTTS creation failed for "${word}":`, error.message);
        resolve(false);
      });
    });
  } catch (error) {
    console.error(`‚ùå Error in generateAndCacheAudio for "${word}":`, error.message);
    return false;
  }
}

async function testAudioGeneration() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ gtts
    try {
      const gTTS = require('gtts');
      console.log('‚úÖ gTTS module found');
    } catch (error) {
      console.error('‚ùå gTTS module not found:', error.message);
      console.log('üí° Install with: npm install gtts');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞
    const testWord = 'hello';
    console.log(`üîä Testing audio generation for: "${testWord}"`);
    
    const result = await generateAndCacheAudio(testWord);
    
    if (result) {
      console.log('‚úÖ Audio generation successful!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
      const cached = await prisma.audioCache.findUnique({
        where: { word: testWord.toLowerCase() }
      });
      
      if (cached) {
        console.log('‚úÖ Audio found in cache');
        console.log(`üìä Audio data size: ${cached.audioData.length} bytes`);
      } else {
        console.log('‚ùå Audio not found in cache after generation');
      }
    } else {
      console.log('‚ùå Audio generation failed');
    }
    
  } catch (error) {
    console.error('‚ùå Test error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testAudioGeneration();
