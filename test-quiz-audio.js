const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ bot.js (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
const fs = require('fs');
const path = require('path');

async function getAudioFromCache(word) {
  try {
    const cached = await prisma.audioCache.findUnique({
      where: { word: word.toLowerCase() }
    });
    
    if (cached) {
      console.log(`üìº Found cached audio for: "${word}"`);
      return cached.audioData;
    } else {
      console.log(`üìº No cached audio for: "${word}"`);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå Failed to get cached audio for "${word}":`, error.message);
    return null;
  }
}

async function generateAndCacheAudio(word) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∫–µ—à–µ
    const existing = await prisma.audioCache.findUnique({
      where: { word: word.toLowerCase() }
    });
    if (existing) {
      console.log(`‚úÖ Found cached audio for: "${word}"`);
      return true;
    }

    console.log(`üîÑ Generating audio for: "${word}"`);

    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é gTTS
    const gTTS = require('gtts');
    const gtts = new gTTS(word, 'en');
    
    return new Promise((resolve) => {
      gtts.stream().then(stream => {
        const chunks = [];
        stream.on('data', chunk => chunks.push(chunk));
        stream.on('end', async () => {
          try {
            const audioBuffer = Buffer.concat(chunks);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await prisma.audioCache.create({
              data: {
                word: word.toLowerCase(),
                audioData: audioBuffer
              }
            });
            
            console.log(`‚úÖ Audio cached for: "${word}" (${audioBuffer.length} bytes)`);
            resolve(true);
          } catch (error) {
            console.error(`‚ùå Failed to cache audio for "${word}":`, error.message);
            resolve(false);
          }
        });
        stream.on('error', (error) => {
          console.error(`‚ùå gTTS stream error for "${word}":`, error.message);
          resolve(false);
        });
      }).catch(error => {
        console.error(`‚ùå gTTS creation failed for "${word}":`, error.message);
        resolve(false);
      });
    });
  } catch (error) {
    console.error(`‚ùå Error in generateAndCacheAudio for "${word}":`, error.message);
    return false;
  }
}

async function sendWordAudio(word) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    if (!/[a-zA-Z]/.test(word)) {
      console.log(`üö´ Skipping audio for non-English word: "${word}"`);
      return false;
    }
    
    const audioBuffer = await getAudioFromCache(word);
    if (!audioBuffer) {
      console.log(`üîá No audio available for: "${word}"`);
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    const tempFileName = `audio_${Date.now()}_${word.replace(/[^a-zA-Z0-9]/g, '_')}.mp3`;
    const tempFilePath = path.join(__dirname, 'temp', tempFileName);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(tempFilePath, audioBuffer);
    
    console.log(`üîä Audio file created: ${tempFileName} (${audioBuffer.length} bytes)`);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(tempFilePath);
    
    console.log(`üîä Audio simulation successful for: "${word}"`);
    return true;
  } catch (error) {
    console.error(`‚ùå Failed to send audio for "${word}":`, error.message);
    return false;
  }
}

async function testQuizAudio() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const words = await prisma.word.findMany({ 
      take: 5,
      select: { word: true, translation: true }
    });
    
    if (words.length === 0) {
      console.log('‚ùå –ù–µ—Ç —Å–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${words.length} —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n`);
    
    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      console.log(`--- –¢–µ—Å—Ç ${i + 1}/5: "${word.word}" ---`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const audioGenerated = await generateAndCacheAudio(word.word);
      
      if (audioGenerated) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ
        const audioSent = await sendWordAudio(word.word);
        if (audioSent) {
          console.log(`‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" –¥–ª—è "${word.word}"`);
        } else {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å" –∞—É–¥–∏–æ –¥–ª—è "${word.word}"`);
        }
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è "${word.word}"`);
      }
      
      console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –≤ –∫–µ—à–µ
    const audioCount = await prisma.audioCache.count();
    console.log(`üìä –ò—Ç–æ–≥–æ –∞—É–¥–∏–æ –≤ –∫–µ—à–µ: ${audioCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testQuizAudio();
