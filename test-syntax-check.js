// –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤ bot.js
// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –Ω–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫

console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π...\n');

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ bot.js...');
  delete require.cache[require.resolve('./bot.js')];
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
  const originalExit = process.exit;
  process.exit = () => {
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω –∑–∞–ø—É—Å–∫)');
  };
  
  const fs = require('fs');
  const botContent = fs.readFileSync('./bot.js', 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const functionsToCheck = [
    'handleWritingAnalysis',
    'showWritingAnalysisResult', 
    'generateImprovedVersion'
  ];
  
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:');
  functionsToCheck.forEach(funcName => {
    const hasFunction = botContent.includes(`function ${funcName}`) || 
                      botContent.includes(`${funcName} =`) ||
                      botContent.includes(`async function ${funcName}`);
    console.log(`‚úÖ ${funcName}: ${hasFunction ? '‚úÖ' : '‚ùå'}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤ –≤ fallback —Å–µ–∫—Ü–∏–∏
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback —Å–µ–∫—Ü–∏–∏:');
  
  // –ù–∞—Ö–æ–¥–∏–º fallback —Å–µ–∫—Ü–∏—é
  const fallbackMatch = botContent.match(/ERROR: OpenAI returned empty[\s\S]*?return;/);
  if (fallbackMatch) {
    const fallbackCode = fallbackMatch[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –≤ fallback
    const checks = [
      { name: '–°–æ–∑–¥–∞–Ω–∏–µ fallbackAnalysis', pattern: /const fallbackAnalysis = \{/ },
      { name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ session.writingAnalysis', pattern: /session\.writingAnalysis = fallbackAnalysis/ },
      { name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ session.step', pattern: /session\.step = ['"]writing_analysis_result['"]/ },
      { name: '–í—ã–∑–æ–≤ showWritingAnalysisResult', pattern: /showWritingAnalysisResult\(ctx, session\)/ },
      { name: '–í—ã–∑–æ–≤ generateImprovedVersion', pattern: /generateImprovedVersion\(ctx, session, userText\)/ }
    ];
    
    checks.forEach(check => {
      const hasPattern = check.pattern.test(fallbackCode);
      console.log(`‚úÖ ${check.name}: ${hasPattern ? '‚úÖ' : '‚ùå'}`);
    });
    
    console.log('‚úÖ Fallback —Å–µ–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
  } else {
    console.log('‚ùå Fallback —Å–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö –≤—ã–∑–æ–≤–æ–≤ showAnalysisResults
  const oldFunctionCalls = botContent.match(/showAnalysisResults\(/g);
  if (oldFunctionCalls) {
    console.log(`‚ùå –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã showAnalysisResults: ${oldFunctionCalls.length}`);
  } else {
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã showAnalysisResults —É–¥–∞–ª–µ–Ω—ã');
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º process.exit
  process.exit = originalExit;
  
  console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!');
  console.log('‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
  console.log('‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
  console.log('‚úÖ Fallback –ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
  console.log('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –æ—à–∏–±–æ–∫ showAnalysisResults');
  
} catch (error) {
  console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
  process.exit(1);
}