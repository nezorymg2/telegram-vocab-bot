// –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /money - —Å–∏–º—É–ª—è—Ü–∏—è –≤—ã–≤–æ–¥–∞
require('dotenv').config({ path: __dirname + '/.env' });
const prisma = require('./database');

const MONEY_SYSTEM = {
  TOTAL_BANK: 60000,
  DAILY_REWARD: 1000,
  TOTAL_DAYS: 30,
  NURBOLAT_ID: '–ù—É—Ä–±–æ–ª–∞—Ç',
  AMINA_ID: '–ê–º–∏–Ω–∞'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã GMT+5
function getLocalDateGMT5() {
  const now = new Date();
  const localTime = new Date(now.getTime() + 5 * 60 * 60 * 1000);
  return localTime.toDateString();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –±–∞–Ω–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
async function getOrCreateSharedBank() {
  try {
    const currentMonth = new Date().toISOString().substring(0, 7);
    
    const existingBank = await prisma.$queryRaw`
      SELECT * FROM "shared_bank" WHERE "month" = ${currentMonth} LIMIT 1
    `;
    
    if (existingBank.length > 0) {
      return existingBank[0];
    }
    
    await prisma.$executeRaw`
      INSERT INTO "shared_bank" ("totalAmount", "month", "lastUpdated")
      VALUES (0, ${currentMonth}, CURRENT_TIMESTAMP)
    `;
    
    const newBank = await prisma.$queryRaw`
      SELECT * FROM "shared_bank" WHERE "month" = ${currentMonth} LIMIT 1
    `;
    
    return newBank[0];
  } catch (error) {
    console.error('Error in getOrCreateSharedBank:', error);
    throw error;
  }
}

async function getOrCreateMoneyRecord(profileName) {
  try {
    const existingRecords = await prisma.$queryRaw`
      SELECT * FROM "money_system" WHERE "profileName" = ${profileName}
    `;
    
    if (existingRecords.length > 0) {
      return existingRecords[0];
    }
    
    await prisma.$executeRaw`
      INSERT INTO "money_system" 
      ("profileName", "totalEarned", "totalOwed", "dailyCompletions", "dailyMissed", "lastCompletionDate")
      VALUES (${profileName}, 0, 0, 0, 0, NULL)
    `;
    
    const newRecords = await prisma.$queryRaw`
      SELECT * FROM "money_system" WHERE "profileName" = ${profileName}
    `;
    
    return newRecords[0];
  } catch (error) {
    console.error('Error in getOrCreateMoneyRecord:', error);
    return null;
  }
}

async function getMoneySystemStats() {
  try {
    const nurbolatRecord = await getOrCreateMoneyRecord(MONEY_SYSTEM.NURBOLAT_ID);
    const aminaRecord = await getOrCreateMoneyRecord(MONEY_SYSTEM.AMINA_ID);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤ –±–∞–Ω–∫–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
    let sharedBankAmount = 0;
    try {
      const sharedBank = await getOrCreateSharedBank();
      sharedBankAmount = sharedBank.totalAmount;
    } catch (error) {
      console.error('Error getting shared bank amount:', error);
    }
    
    const totalTransferred = nurbolatRecord.totalEarned + aminaRecord.totalEarned + sharedBankAmount;
    const remainingBank = MONEY_SYSTEM.TOTAL_BANK - totalTransferred;
    
    return {
      nurbolat: nurbolatRecord,
      amina: aminaRecord,
      totalBank: MONEY_SYSTEM.TOTAL_BANK,
      remainingBank: remainingBank,
      totalTransferred: totalTransferred,
      sharedBankAmount: sharedBankAmount
    };
  } catch (error) {
    console.error('Error getting money system stats:', error);
    return null;
  }
}

async function testMoneyCommand() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /money...\n');
    
    const stats = await getMoneySystemStats();
    if (!stats) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–Ω–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
      return;
    }
    
    let msg = `üí∞ <b>–î–µ–Ω–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n`;
    
    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    msg += `üè¶ <b>–û–±—â–∏–π –±–∞–Ω–∫:</b> ${stats.totalBank.toLocaleString()} —Ç–µ–Ω–≥–µ\n`;
    msg += `üí∏ <b>–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ:</b> ${stats.totalTransferred.toLocaleString()} —Ç–µ–Ω–≥–µ\n`;
    msg += `üíº <b>–û—Å—Ç–∞—Ç–æ–∫:</b> ${stats.remainingBank.toLocaleString()} —Ç–µ–Ω–≥–µ\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ù—É—Ä–±–æ–ª–∞—Ç–∞
    msg += `üë®‚Äçüíº <b>–ù—É—Ä–±–æ–ª–∞—Ç:</b>\n`;
    msg += `‚úÖ –ó–∞—Ä–∞–±–æ—Ç–∞–ª: ${stats.nurbolat.totalEarned.toLocaleString()} —Ç–µ–Ω–≥–µ\n`;
    msg += `‚ùå –î–æ–ª–∂–µ–Ω: ${stats.nurbolat.totalOwed.toLocaleString()} —Ç–µ–Ω–≥–µ\n`;
    msg += `üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.nurbolat.dailyCompletions} –¥–Ω–µ–π\n`;
    msg += `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.nurbolat.dailyMissed} –¥–Ω–µ–π\n`;
    msg += `üë• –û–±–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏: ${stats.nurbolat.bothMissedDays || 0} –¥–Ω–µ–π\n`;
    
    if (stats.nurbolat.lastCompletionDate) {
      const lastDate = new Date(stats.nurbolat.lastCompletionDate);
      const today = getLocalDateGMT5();
      const isToday = stats.nurbolat.lastCompletionDate === today;
      msg += `üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${isToday ? '–°–µ–≥–æ–¥–Ω—è' : lastDate.toLocaleDateString('ru-RU')}\n`;
    }
    msg += `\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ê–º–∏–Ω—ã
    msg += `üë©‚Äçüíº <b>–ê–º–∏–Ω–∞:</b>\n`;
    msg += `‚úÖ –ó–∞—Ä–∞–±–æ—Ç–∞–ª–∞: ${stats.amina.totalEarned.toLocaleString()} —Ç–µ–Ω–≥–µ\n`;
    msg += `‚ùå –î–æ–ª–∂–Ω–∞: ${stats.amina.totalOwed.toLocaleString()} —Ç–µ–Ω–≥–µ\n`;
    msg += `üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.amina.dailyCompletions} –¥–Ω–µ–π\n`;
    msg += `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.amina.dailyMissed} –¥–Ω–µ–π\n`;
    msg += `üë• –û–±–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏: ${stats.amina.bothMissedDays || 0} –¥–Ω–µ–π\n`;
    
    if (stats.amina.lastCompletionDate) {
      const lastDate = new Date(stats.amina.lastCompletionDate);
      const today = getLocalDateGMT5();
      const isToday = stats.amina.lastCompletionDate === today;
      msg += `üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${isToday ? '–°–µ–≥–æ–¥–Ω—è' : lastDate.toLocaleDateString('ru-RU')}\n`;
    }
    msg += `\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
    try {
      const sharedBank = await getOrCreateSharedBank();
      msg += `üè¶ <b>–ë–∞–Ω–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:</b> ${sharedBank.totalAmount.toLocaleString()} —Ç–µ–Ω–≥–µ\n`;
      msg += `üí∞ <i>–î–µ–Ω—å–≥–∏ –∑–∞ –¥–Ω–∏ –∫–æ–≥–¥–∞ –æ–±–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ (–¥–µ–ª–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞)</i>\n\n`;
    } catch (error) {
      console.error('Error getting shared bank info:', error);
      msg += `üè¶ <b>–ë–∞–Ω–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:</b> 0 —Ç–µ–Ω–≥–µ\n\n`;
    }
    
    // –ü—Ä–∞–≤–∏–ª–∞
    msg += `üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n`;
    msg += `‚Ä¢ –ü—Ä–æ—à—ë–ª —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ‚Üí +${MONEY_SYSTEM.DAILY_REWARD} —Ç–µ–Ω–≥–µ\n`;
    msg += `‚Ä¢ –û–¥–∏–Ω –ø—Ä–æ–ø—É—Å—Ç–∏–ª ‚Üí ${MONEY_SYSTEM.DAILY_REWARD} —Ç–µ–Ω–≥–µ –¥—Ä—É–≥–æ–º—É\n`;
    msg += `‚Ä¢ –û–±–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ‚Üí ${MONEY_SYSTEM.DAILY_REWARD * 2} —Ç–µ–Ω–≥–µ –≤ –±–∞–Ω–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π\n`;
    msg += `‚Ä¢ –ë–∞–Ω–∫ –¥–µ–ª–∏—Ç—Å—è –ø–æ–ø–æ–ª–∞–º –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞\n`;
    msg += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 23:59 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n`;
    msg += `‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: ${MONEY_SYSTEM.TOTAL_DAYS}`;
    
    console.log('üì± –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã /money:');
    console.log('================================');
    console.log(msg.replace(/<b>/g, '').replace(/<\/b>/g, '').replace(/<i>/g, '').replace(/<\/i>/g, ''));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testMoneyCommand();