// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç—Å—Å–µ

console.log('=== TESTING ESSAY STRUCTURE ADDITION ===');

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
const essayStructureMessage = 
  `üí° <b>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —ç—Å—Å–µ:</b>\n\n` +
  `<b>[Intro]</b>\n` +
  `I strongly believe that / I firmly agree that / There is no doubt that __________.\n` +
  `This essay will discuss / aims to examine / will explore __________.\n\n` +
  
  `<b>[Body 1: Background or Reason 1]</b>\n` +
  `Firstly / To begin with / One major reason is that __________.\n` +
  `This is mainly because / This can be explained by / The main reason for this is that __________.\n` +
  `For example / For instance / A good illustration of this is __________.\n\n` +
  
  `<b>[Body 2: Development or Reason 2]</b>\n` +
  `Secondly / In addition / Another important factor is that __________.\n` +
  `As a result / Consequently / This leads to __________.\n` +
  `Furthermore / Moreover / Additionally __________.\n\n` +
  
  `<b>[Conclusion]</b>\n` +
  `In conclusion / To sum up / Overall __________.\n` +
  `Therefore, it is clear that / Hence, it can be concluded that / Thus, it is evident that __________.`;

console.log('Message preview:');
console.log('================');
console.log(essayStructureMessage);
console.log('================');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
console.log(`\nMessage length: ${essayStructureMessage.length} characters`);
console.log(`Telegram limit: 4096 characters`);
console.log(`Within limit: ${essayStructureMessage.length <= 4096 ? '‚úÖ' : '‚ùå'}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ç–µ–≥–∏
const htmlTags = essayStructureMessage.match(/<[^>]+>/g) || [];
console.log(`\nHTML tags found: ${htmlTags.length}`);
console.log('Tags:', htmlTags);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–≥–æ–≤
const openTags = (essayStructureMessage.match(/<b>/g) || []).length;
const closeTags = (essayStructureMessage.match(/<\/b>/g) || []).length;
console.log(`\nTag balance: <b> tags: ${openTags}, </b> tags: ${closeTags}`);
console.log(`Tags balanced: ${openTags === closeTags ? '‚úÖ' : '‚ùå'}`);

console.log('\n=== TEST COMPLETED ===');
console.log('‚úÖ Message formatting looks correct');
console.log('‚úÖ Within Telegram character limit');
console.log('‚úÖ HTML tags are properly balanced');