const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

const prisma = new PrismaClient();

async function loadWordsFromOxford() {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ oxford3000.json...');
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const data = fs.readFileSync('./oxford3000.json', 'utf8');
    const words = JSON.parse(data);
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${words.length} —Å–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);
    
    // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–≤–∞...');
    await prisma.word.deleteMany();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –ø–∞—á–∫–∞–º–∏
    const batchSize = 100;
    let loaded = 0;
    
    for (let i = 0; i < words.length; i += batchSize) {
      const batch = words.slice(i, i + batchSize);
      
      await prisma.word.createMany({
        data: batch.map(item => ({
          word: item.word,
          translation: item.translation,
          section: item.section || '–†–∞–∑–Ω–æ–µ'
        }))
      });
      
      loaded += batch.length;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loaded}/${words.length} —Å–ª–æ–≤`);
    }
    
    console.log('üéâ –í—Å–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalWords = await prisma.word.count();
    console.log(`üìä –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: ${totalWords}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
loadWordsFromOxford();
