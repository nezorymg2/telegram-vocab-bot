// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤ –∏–∑ —Å—Ç–∞–¥–∏–∏ 1 –≤ —Å—Ç–∞–¥–∏–∏ 5
console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤ —Å—Ç–∞–¥–∏–∏ 1 –≤ —Å—Ç–∞–¥–∏–∏ 5...\n');

// –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–∑ —Å—Ç–∞–¥–∏–∏ 1
const mockSession = {
  stage1Words: ['accomplish', 'significant', 'challenge', 'opportunity', 'innovative', 'strategy', 'implement', 'evaluate', 'perspective', 'collaborate', 'exceed', 'demonstrate', 'effective', 'sustainable', 'optimize'],
  smartRepeatWords: [],
  smartRepeatStage: 5,
  step: 'story_task'
};

// –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤
const mockUserWords = [
  { word: 'accomplish', correct: 2, createdAt: new Date('2024-01-01'), updatedAt: new Date('2024-10-01') },
  { word: 'significant', correct: 1, createdAt: new Date('2024-01-02'), updatedAt: new Date('2024-10-02') },
  { word: 'challenge', correct: 3, createdAt: new Date('2024-01-03'), updatedAt: new Date('2024-10-03') },
  { word: 'opportunity', correct: 2, createdAt: new Date('2024-01-04'), updatedAt: new Date('2024-10-04') },
  { word: 'innovative', correct: 1, createdAt: new Date('2024-01-05'), updatedAt: new Date('2024-10-05') },
  { word: 'strategy', correct: 4, createdAt: new Date('2024-01-06'), updatedAt: new Date('2024-10-06') },
  { word: 'implement', correct: 2, createdAt: new Date('2024-01-07'), updatedAt: new Date('2024-10-07') },
  { word: 'evaluate', correct: 3, createdAt: new Date('2024-01-08'), updatedAt: new Date('2024-10-08') },
  { word: 'perspective', correct: 1, createdAt: new Date('2024-01-09'), updatedAt: new Date('2024-10-09') },
  { word: 'collaborate', correct: 2, createdAt: new Date('2024-01-10'), updatedAt: new Date('2024-10-10') },
  { word: 'exceed', correct: 3, createdAt: new Date('2024-01-11'), updatedAt: new Date('2024-10-11') },
  { word: 'demonstrate', correct: 1, createdAt: new Date('2024-01-12'), updatedAt: new Date('2024-10-12') },
  { word: 'effective', correct: 4, createdAt: new Date('2024-01-13'), updatedAt: new Date('2024-10-13') },
  { word: 'sustainable', correct: 2, createdAt: new Date('2024-01-14'), updatedAt: new Date('2024-10-14') },
  { word: 'optimize', correct: 1, createdAt: new Date('2024-01-15'), updatedAt: new Date('2024-10-15') },
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –±—ã–ª–æ –≤ —Å—Ç–∞–¥–∏–∏ 1
  { word: 'random1', correct: 5, createdAt: new Date('2024-01-16'), updatedAt: new Date('2024-10-16') },
  { word: 'random2', correct: 0, createdAt: new Date('2024-01-17'), updatedAt: new Date('2024-10-17') }
];

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –≤ —Å—Ç–∞–¥–∏–∏ 1
console.log('‚úÖ –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ —Å—Ç–∞–¥–∏–∏ 1');
console.log('Stage1Words –≤ —Å–µ—Å—Å–∏–∏:', mockSession.stage1Words.length, '—Å–ª–æ–≤');
console.log('–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤:', mockSession.stage1Words.slice(0, 5));
console.log('');

// –¢–µ—Å—Ç 2: –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è —Å—Ç–∞–¥–∏–∏ 5
console.log('‚úÖ –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è —Å—Ç–∞–¥–∏–∏ 5');

if (mockSession.stage1Words && mockSession.stage1Words.length > 0) {
  console.log('‚úì Stage1Words –Ω–∞–π–¥–µ–Ω—ã:', mockSession.stage1Words.length);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –∏–∑ —Å—Ç–∞–¥–∏–∏ 1
  const stage1WordsData = mockUserWords.filter(word => mockSession.stage1Words.includes(word.word));
  console.log('‚úì –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ–≤–∞—Ö –∏–∑ —Å—Ç–∞–¥–∏–∏ 1:', stage1WordsData.length);
  console.log('  –°–ª–æ–≤–∞:', stage1WordsData.map(w => w.word));
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∏ –≤—ã–±–æ—Ä 15 —Å–ª–æ–≤
  const shuffled = [...stage1WordsData].sort(() => Math.random() - 0.5);
  const selectedWords = shuffled.slice(0, Math.min(15, shuffled.length));
  
  console.log('‚úì –í—ã–±—Ä–∞–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', selectedWords.length, '—Å–ª–æ–≤');
  console.log('  –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:', selectedWords.map(w => w.word));
} else {
  console.log('‚ùå Stage1Words –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ fallback –ª–æ–≥–∏–∫–∞');
}

console.log('');

// –¢–µ—Å—Ç 3: Fallback –ª–æ–≥–∏–∫–∞
console.log('‚úÖ –¢–µ—Å—Ç 3: Fallback –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ stage1Words');
const sessionWithoutStage1 = { ...mockSession, stage1Words: null };

if (!sessionWithoutStage1.stage1Words || sessionWithoutStage1.stage1Words.length === 0) {
  console.log('‚úì Stage1Words –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞');
  
  // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏
  const wordsWithPriority = mockUserWords
    .map(w => ({ ...w, priority: (6 - Math.min(w.correct, 5)) * 2 }))
    .sort((a, b) => b.priority - a.priority)
    .slice(0, 20);
    
  console.log('‚úì Fallback –≤—ã–±—Ä–∞–ª:', wordsWithPriority.length, '—Å–ª–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É');
  console.log('  –¢–æ–ø-5 –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:', wordsWithPriority.slice(0, 5).map(w => `${w.word}(${w.priority})`));
}

console.log('');

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
console.log('‚úÖ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç–∞–¥–∏–∏ 1');

const testStage1Words = ['word1', 'word2', 'word3'];
const testUserWords = [
  { word: 'word1', correct: 1 },
  { word: 'word2', correct: 2 }, 
  { word: 'word3', correct: 3 },
  { word: 'word4', correct: 4 }, // –≠—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –ù–ï –±—ã–ª–æ –≤ —Å—Ç–∞–¥–∏–∏ 1
  { word: 'word5', correct: 5 }  // –≠—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –ù–ï –±—ã–ª–æ –≤ —Å—Ç–∞–¥–∏–∏ 1
];

const filteredWords = testUserWords.filter(word => testStage1Words.includes(word.word));
console.log('‚úì –ò–∑', testUserWords.length, '—Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
console.log('‚úì –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ', filteredWords.length, '—Å–ª–æ–≤ –∏–∑ —Å—Ç–∞–¥–∏–∏ 1');
console.log('‚úì –°–ª–æ–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç stage1:', filteredWords.every(w => testStage1Words.includes(w.word)));

console.log('\nüéØ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
console.log('üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:');
console.log('  ‚Ä¢ –°—Ç–∞–¥–∏—è 1 —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞ –≤ session.stage1Words');
console.log('  ‚Ä¢ –°—Ç–∞–¥–∏—è 5 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ 15 —Å–ª–æ–≤ –∏–∑ st–∞–¥–∏–∏ 1');
console.log('  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
console.log('  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã');