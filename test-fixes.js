const fs = require('fs');

console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /words —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
console.log('1. ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /words —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:');
const mockWords = [
  { word: 'test1', correct: 1, translation: '—Ç–µ—Å—Ç1' },  // –Ω–æ–≤–æ–µ
  { word: 'test2', correct: 3, translation: '—Ç–µ—Å—Ç2' },  // –∏–∑—É—á–∞–µ–º–æ–µ
  { word: 'test3', correct: 5, translation: '—Ç–µ—Å—Ç3' },  // –∏–∑—É—á–µ–Ω–Ω–æ–µ
  { word: 'test4', correct: 2, translation: '—Ç–µ—Å—Ç4' },  // –Ω–æ–≤–æ–µ
  { word: 'test5', correct: 4, translation: '—Ç–µ—Å—Ç5' },  // –∏–∑—É—á–∞–µ–º–æ–µ
];

const totalWords = mockWords.length;
const newWords = mockWords.filter(w => (w.correct || 0) <= 2).length;
const learningWords = mockWords.filter(w => (w.correct || 0) >= 3 && (w.correct || 0) <= 4).length;
const learnedWords = mockWords.filter(w => (w.correct || 0) >= 5).length;

console.log(`   üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: ${totalWords}`);
console.log(`   üî¥ –ù–æ–≤—ã–µ: ${newWords} | üü° –ò–∑—É—á–∞–µ–º—ã–µ: ${learningWords} | üü¢ –ò–∑—É—á–µ–Ω–Ω—ã–µ: ${learnedWords}`);

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
console.log('\n2. ‚úÖ –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:');
let testMessage = '–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç\n';
const maxLength = 100; // –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
let messages = [];

for (let i = 0; i < 10; i++) {
  const newLine = `–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ${i} —Å —Ç–µ–∫—Å—Ç–æ–º\n`;
  
  if ((testMessage + newLine).length > maxLength) {
    messages.push(testMessage + '–ö–û–ù–ï–¶');
    testMessage = '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ\n';
  }
  testMessage += newLine;
}
messages.push(testMessage + '–§–ò–ù–ê–õ');

console.log(`   üìÑ –°–æ–∑–¥–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${messages.length}`);
messages.forEach((msg, i) => console.log(`   –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i+1}: ${msg.length} —Å–∏–º–≤–æ–ª–æ–≤`));

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–ª—è Stage 5
console.log('\n3. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ Stage 2:');
const mockQuizWords = ['word1', 'word2', 'word3', 'word4', 'word5', 'word6'];
const savedWords = mockQuizWords.slice(0, 5).map(word => ({
  word: word,
  translation: `–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è ${word}`,
  example: `–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å ${word}.`
}));

console.log(`   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–ª–æ–≤: ${savedWords.length}`);
savedWords.forEach(w => console.log(`   - ${w.word}: ${w.translation}`));

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å –¥–∞—Ç—ã
console.log('\n4. ‚úÖ –°–±—Ä–æ—Å –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:');
const mockData = {
  "930858056": {
    "–ù—É—Ä–±–æ–ª–∞—Ç": {
      "lastSmartRepeatDate": "Wed Oct 15 2025",
      "words": []
    }
  }
};

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±—Ä–æ—Å
Object.keys(mockData).forEach(userId => {
  Object.keys(mockData[userId]).forEach(profile => {
    if (profile === '–ù—É—Ä–±–æ–ª–∞—Ç') {
      if (mockData[userId][profile].lastSmartRepeatDate) {
        console.log(`   üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É: ${mockData[userId][profile].lastSmartRepeatDate}`);
        delete mockData[userId][profile].lastSmartRepeatDate;
      }
    }
  });
});

console.log(`   ‚úÖ –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: ${!mockData["930858056"]["–ù—É—Ä–±–æ–ª–∞—Ç"].lastSmartRepeatDate}`);

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É finishSmartRepeat
console.log('\n5. ‚úÖ –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Smart Repeat:');
const mockSession = {
  stage2VocabularyWords: [
    { word: 'test', translation: '—Ç–µ—Å—Ç', example: '–ü—Ä–∏–º–µ—Ä' }
  ],
  currentQuizSession: { words: ['word1', 'word2'] }
};

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
const savedVocabularyWords = mockSession.stage2VocabularyWords || [];
console.log(`   üíæ –°–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–æ –æ—á–∏—Å—Ç–∫–∏: ${savedVocabularyWords.length > 0}`);

// –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
delete mockSession.stage2VocabularyWords;
delete mockSession.currentQuizSession;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è Stage 5
if (savedVocabularyWords && savedVocabularyWords.length > 0) {
  console.log(`   ‚úÖ Stage 5 –ø–æ–ª—É—á–∏—Ç ${savedVocabularyWords.length} —Å–ª–æ–≤`);
} else {
  console.log(`   ‚ùå Stage 5 –Ω–µ –ø–æ–ª—É—á–∏—Ç —Å–ª–æ–≤–∞`);
}

console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
