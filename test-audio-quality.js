const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testAudioQuality() {
  try {
    console.log('üéµ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ...');
    
    // –ù–∞–π–¥–µ–º –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –∞—É–¥–∏–æ
    const wordsWithAudio = await prisma.word.findMany({
      where: {
        audioData: { not: null }
      },
      take: 10,
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${wordsWithAudio.length} —Å–ª–æ–≤ —Å –∞—É–¥–∏–æ:`);
    
    for (const word of wordsWithAudio) {
      const audioSize = word.audioData ? word.audioData.length : 0;
      console.log(`- ${word.word} (${word.profile}): ${audioSize} –±–∞–π—Ç`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ - —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
      if (audioSize < 5000) {
        console.warn(`  ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–ª—è "${word.word}"`);
      } else if (audioSize > 50000) {
        console.warn(`  ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–ª—è "${word.word}"`);
      } else {
        console.log(`  ‚úÖ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–ª—è "${word.word}"`);
      }
    }
    
    await prisma.$disconnect();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
    await prisma.$disconnect();
  }
}

testAudioQuality();
