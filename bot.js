require('dotenv').config({ path: __dirname + '/.env' });
console.log('DEBUG: Environment loaded');
// –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –≤ production
if (process.env.NODE_ENV !== 'production') {
  console.log('DEBUG: BOT_TOKEN:', process.env.BOT_TOKEN ? 'Set' : 'Not set');
  console.log('DEBUG: OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? 'Set' : 'Not set');
}
const { Bot, Keyboard, InputFile } = require('grammy');
const axios = require('axios');
const fs = require('fs');
const cron = require('node-cron');
const { execSync } = require('child_process');
const prisma = require('./database');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
  try {
    console.log('üîÑ Initializing database...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ Database connection established');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ words
    try {
      await prisma.word.findFirst();
      console.log('‚úÖ Database schema is valid');
    } catch (schemaError) {
      console.log('‚ö†Ô∏è Schema validation failed, running migration...');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å —Ñ–ª–∞–≥–æ–º accept-data-loss
      try {
        execSync('npx prisma db push --accept-data-loss', { 
          stdio: 'inherit',
          timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        console.log('‚úÖ Database migration completed successfully');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        await prisma.word.findFirst();
        console.log('‚úÖ Database schema validated after migration');
        
      } catch (migrationError) {
        console.error('‚ùå Migration failed:', migrationError.message);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        console.log('üîÑ Trying alternative migration approach...');
        try {
          execSync('npx prisma generate', { stdio: 'inherit' });
          execSync('npx prisma db push --force-reset --accept-data-loss', { stdio: 'inherit' });
          console.log('‚úÖ Alternative migration successful');
        } catch (altError) {
          console.error('‚ùå Alternative migration also failed:', altError.message);
          throw new Error('All migration attempts failed');
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error.message);
    console.log('‚ö†Ô∏è Bot will continue but database operations may fail...');
    console.log('üìã Please check your DATABASE_URL and database connectivity');
  }
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Prisma Client
console.log('DEBUG: prisma type:', typeof prisma);
console.log('DEBUG: prisma.word type:', typeof prisma.word);
if (prisma.word) {
  console.log('DEBUG: prisma.word.findMany type:', typeof prisma.word.findMany);
} else {
  console.log('DEBUG: prisma.word is undefined!');
  console.log('DEBUG: available properties:', Object.getOwnPropertyNames(prisma));
}

const sessions = {};

const bot = new Bot(process.env.BOT_TOKEN);

// --- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è bot) ---
const motivationalQuotes = [
  '–£—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç—å –ö–æ–ª–∏–∑–µ–π: –ø–æ –∫–∏—Ä–ø–∏—á–∏–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üáÆüáπ',
  '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä—É–¥ ‚Äî –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π —É—Å–ø–µ—Ö –Ω–∞ IELTS!',
  '–î–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ –º–µ—á—Ç–µ ‚Äî —É–∂–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥!',
  '–í –†–∏–º –≤–µ–¥—É—Ç –≤—Å–µ –¥–æ—Ä–æ–≥–∏, –∞ –∫ —É—Å–ø–µ—Ö—É ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞!',
  '–õ—É—á—à–∏–π –¥–µ–Ω—å –¥–ª—è —É—á—ë–±—ã ‚Äî —Å–µ–≥–æ–¥–Ω—è!',
  '–°–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º ‚Äî –∏ —Ç—ã —É–∂–µ –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏!',
  '–¢–æ—Ç, –∫—Ç–æ —É—á–∏—Ç, —Ç–æ—Ç –ø–æ–±–µ–∂–¥–∞–µ—Ç!',
  '–°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å!',
  '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!',
  'IELTS –Ω–µ —Å–¥–∞–µ—Ç—Å—è –±–µ–∑ –±–æ—è!'
];

// --- –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ XP ---
const XP_LEVELS = [
  { level: 1, required_xp: 0, title: 'üå± –ù–æ–≤–∏—á–æ–∫', emoji: 'üå±' },
  { level: 2, required_xp: 300, title: 'üî• –≠–Ω—Ç—É–∑–∏–∞—Å—Ç', emoji: 'üî•' },
  { level: 3, required_xp: 800, title: 'üìö –°—Ç—É–¥–µ–Ω—Ç', emoji: 'üìö' },
  { level: 4, required_xp: 1500, title: 'üéì –ó–Ω–∞—Ç–æ–∫', emoji: 'üéì' },
  { level: 5, required_xp: 3000, title: 'üèÖ –≠–∫—Å–ø–µ—Ä—Ç', emoji: 'üèÖ' },
  { level: 6, required_xp: 6000, title: 'üëë –ú–∞—Å—Ç–µ—Ä', emoji: 'üëë' },
  { level: 7, required_xp: 12000, title: '‚ö° –ì—É—Ä—É', emoji: '‚ö°' },
  { level: 8, required_xp: 25000, title: 'üåü –õ–µ–≥–µ–Ω–¥–∞', emoji: 'üåü' },
  { level: 9, required_xp: 50000, title: 'üíé –¢–∏—Ç–∞–Ω', emoji: 'üíé' },
  { level: 10, required_xp: 100000, title: 'üöÄ –ì—Ä–∞–Ω–¥ –ú–∞—Å—Ç–µ—Ä', emoji: 'üöÄ' }
];

// –ú–∞—Å—Å–∏–≤—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ streak (–ø–æ —Å—Ç–µ–ø–µ–Ω–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏)

// –ó–∞ 6 —á–∞—Å–æ–≤ - —Å–ø–æ–∫–æ–π–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
const REMINDERS_6H = [
  "üìö –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è üåü",
  "‚òï –í—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è! –î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –µ—â—ë –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞",
  "üòä –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ —Å–ª–æ–≤–∞ - —É —Ç–µ–±—è –µ—â—ë –µ—Å—Ç—å 6 —á–∞—Å–æ–≤ üìñ",
  "üåÖ –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π! –¢–≤–æ–π streak –∂–¥—ë—Ç —Ç–µ–±—è üî•",
  "üìù –°–µ–≥–æ–¥–Ω—è —É–∂–µ –∏–∑—É—á–∞–ª —Å–ª–æ–≤–∞? –ï—Å–ª–∏ –Ω–µ—Ç - —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å! üí™",
  "üéØ –ü–æ–¥–¥–µ—Ä–∂–∏ —Å–≤–æ–π streak! –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç ‚ö°",
  "üå∏ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è! –ò –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–æ—Ä—Ü–∏—é –∑–Ω–∞–Ω–∏–π üß†",
  "üìä –ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏? –ü—Ä–æ–π–¥–∏ —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏ –ø—Ä–æ–∫–∞—á–∞–π —É—Ä–æ–≤–µ–Ω—å! üöÄ",
  "üåü –¢–≤–æ–π streak –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —Å—á–µ—Ç—É! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üíé",
  "üìö –ó–Ω–∞–Ω–∏—è - —ç—Ç–æ —Å–∏–ª–∞! –ü–æ–ø–æ–ª–Ω–∏ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å —Å–µ–≥–æ–¥–Ω—è üèÜ",
  "‚òÄÔ∏è –ù–æ–≤—ã–π –¥–µ–Ω—å, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –í—Ä–µ–º—è –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è üåà",
  "üéì –ü—É—Ç—å –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –∑–∞–Ω—è—Ç–∏—è üî•"
];

// –ó–∞ 3 —á–∞—Å–∞ - –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
const REMINDERS_3H = [
  "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–æ —Å–ª—ë—Ç–∞ streak –æ—Å—Ç–∞–ª–æ—Å—å 3 —á–∞—Å–∞ ‚è∞",
  "üî• –¢–≤–æ–π streak –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏! –ü—Ä–æ–π–¥–∏ —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–π—á–∞—Å üí®",
  "üì¢ –í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –µ—Å—Ç—å 3 —á–∞—Å–∞ —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å streak! ‚ö°",
  "üö® Streak-alert! –û—Å—Ç–∞–ª–æ—Å—å 3 —á–∞—Å–∞ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ üåô",
  "üí™ –ù–µ –¥–∞–π streak'—É –ø—Ä–æ–ø–∞—Å—Ç—å! –í—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ üéØ",
  "‚è≥ –í—Ä–µ–º—è –∏–¥—ë—Ç! 3 —á–∞—Å–∞ –¥–æ –ø–æ—Ç–µ—Ä–∏ streak - –¥–µ–π—Å—Ç–≤—É–π! üî•",
  "üéØ –°–µ—Ä—å—ë–∑–Ω–æ, –ø–æ—Ä–∞ –∑–∞–Ω—è—Ç—å—Å—è! –¢–≤–æ–π streak –≤–∏—Å–∏—Ç –Ω–∞ –≤–æ–ª–æ—Å–∫–µ üìö",
  "‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: streak —Å–ª–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞! üö®",
  "üîî –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å streak! 3 —á–∞—Å–∞ –≤ –∑–∞–ø–∞—Å–µ ‚è∞",
  "üíé –¢–≤–æ–π –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π streak –∂–¥—ë—Ç –≤–Ω–∏–º–∞–Ω–∏—è! –û—Å—Ç–∞–ª–æ—Å—å 3 —á–∞—Å–∞ üåü",
  "üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è! Streak –Ω–µ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞ ‚è≥",
  "üìû –°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤: —Ç–≤–æ–π streak –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–µ–±–µ! 3 —á–∞—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å üî•"
];

// –ó–∞ 1 —á–∞—Å - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–æ—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
const REMINDERS_1H = [
  "üö® –ö–†–ò–¢–ò–ß–ù–û! Streak —Å–ª–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å! –î–ï–ô–°–¢–í–£–ô –°–ï–ô–ß–ê–°! ‚ö°",
  "üí• –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°! –°–ø–∞—Å–∏ —Å–≤–æ–π streak –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üî•",
  "‚è∞ 60 –ú–ò–ù–£–¢ –î–û –ö–ê–¢–ê–°–¢–†–û–§–´! –û—Ç–∫—Ä—ã–≤–∞–π –±–æ—Ç–∞ –∏ –∑–∞–Ω–∏–º–∞–π—Å—è! üö®",
  "üÜò SOS! –¢–≤–æ–π streak —É–º–∏—Ä–∞–µ—Ç! 1 —á–∞—Å –¥–æ –ø–æ–ª—É–Ω–æ—á–∏! üíÄ",
  "üî• –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–°–ß–Å–¢! 1 —á–∞—Å –¥–æ –ø–æ—Ç–µ—Ä–∏ –≤—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞! ‚è≥",
  "üí£ –ë–û–ú–ë–ê –ó–ê–ú–ï–î–õ–ï–ù–ù–û–ì–û –î–ï–ô–°–¢–í–ò–Ø! Streak –≤–∑–æ—Ä–≤—ë—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å! üí•",
  "üöÄ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ú–ò–°–°–ò–Ø! –°–ø–∞—Å—Ç–∏ streak –∑–∞ 60 –º–∏–Ω—É—Ç! üéØ",
  "‚ö° –ú–û–õ–ù–ò–Ø –ù–ï –î–†–ï–ú–õ–ï–¢! 1 —á–∞—Å –¥–æ —Å–ª—ë—Ç–∞ streak! –ë–ï–ì–ò! üèÉ‚Äç‚ôÇÔ∏è",
  "üåã –ò–ó–í–ï–†–ñ–ï–ù–ò–ï –ë–õ–ò–ó–ö–û! Streak –ø—Ä–æ–ø–∞–¥—ë—Ç —á–µ—Ä–µ–∑ —á–∞—Å! üî•",
  "‚ö∞Ô∏è –ü–û–°–õ–ï–î–ù–ò–ï 60 –ú–ò–ù–£–¢ –∂–∏–∑–Ω–∏ —Ç–≤–æ–µ–≥–æ streak! üíî",
  "üå™Ô∏è –¢–û–†–ù–ê–î–û –ü–†–ò–ë–õ–ò–ñ–ê–ï–¢–°–Ø! 1 —á–∞—Å –¥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è streak! üåä",
  "üíé –°–û–ö–†–û–í–ò–©–ï –ò–°–ß–ï–ó–ù–ï–¢! –í—Å–µ–≥–æ 1 —á–∞—Å —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å streak! ‚è∞"
];

// –°–æ–≤–µ—Ç—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (20 —à—Ç—É–∫)
const RELAX_TIPS = [
  // –§–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã (6)
  "üé¨ –ü–æ—Å–º–æ—Ç—Ä–∏ –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏",
  "üì∫ –í–∫–ª—é—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–µ—Ä–∏–∞–ª –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ", 
  "üé≠ –ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–∞ YouTube",
  "üé™ –ü–æ—Å–º–æ—Ç—Ä–∏ —Å—Ç–µ–Ω–¥–∞–ø –∫–æ–º–µ–¥–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
  "üé® –í–∫–ª—é—á–∏ —Ñ–∏–ª—å–º —Å –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
  "üéµ –ü–æ—Å–º–æ—Ç—Ä–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –∏–ª–∏ –∫–æ–Ω—Ü–µ—Ä—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
  
  // –ß—Ç–µ–Ω–∏–µ (5)
  "üìö –ü—Ä–æ—á–∏—Ç–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ª—é–±–∏–º–æ–π –∫–Ω–∏–≥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
  "üìñ –ü–æ—á–∏—Ç–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –í–∏–∫–∏–ø–µ–¥–∏–∏", 
  "üì∞ –ü—Ä–æ–ª–∏—Å—Ç–∞–π –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –ª—é–±–∏–º—É—é —Ç–µ–º—É",
  "üìù –ü–æ—á–∏—Ç–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–∞—Å—Å–∫–∞–∑—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
  "üìë –ò–∑—É—á–∏ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –±–ª–æ–≥ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–µ–º–µ",
  
  // –ò–≥—Ä—ã (4)
  "üéÆ –ü–æ–∏–≥—Ä–∞–π –≤ –ª—é–±–∏–º—É—é –∏–≥—Ä—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º",
  "üïπÔ∏è –ü–æ–ø—Ä–æ–±—É–π —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–≥—Ä—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
  "üéØ –ü–æ–∏–≥—Ä–∞–π –≤ —Å–ª–æ–≤–∞ –∏–ª–∏ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
  
  // –ú—É–∑—ã–∫–∞/–ø–æ–¥–∫–∞—Å—Ç—ã (3)
  "üéµ –ü–æ—Å–ª—É—à–∞–π –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—É—é –º—É–∑—ã–∫—É —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –ø–µ—Å–µ–Ω",
  "üéß –í–∫–ª—é—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
  "üéº –ò–∑—É—á–∏ —Ç–µ–∫—Å—Ç—ã –ª—é–±–∏–º—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Å–µ–Ω",
  
  // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (2)
  "üíª –ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É",
  "üåê –ü–æ–æ–±—â–∞–π—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —á–∞—Ç–∞—Ö"
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞
function getRandomRelaxTip() {
  return RELAX_TIPS[Math.floor(Math.random() * RELAX_TIPS.length)];
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ XP –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
function calculateXP(wordCorrectLevel, streakMultiplier = 1) {
  let baseXP;
  if (wordCorrectLevel <= 1) baseXP = 8;      // –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
  else if (wordCorrectLevel === 2) baseXP = 12; // –Ω–µ–º–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–Ω—ã–µ
  else if (wordCorrectLevel === 3) baseXP = 18; // —Å—Ä–µ–¥–Ω–∏–µ
  else if (wordCorrectLevel === 4) baseXP = 25; // —Ö–æ—Ä–æ—à–∏–µ
  else baseXP = 35; // –æ—Ç–ª–∏—á–Ω–æ –∏–∑—É—á–µ–Ω–Ω—ã–µ (—Å–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å)
  
  return Math.floor(baseXP * streakMultiplier);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ XP
function getLevelByXP(xp) {
  for (let i = XP_LEVELS.length - 1; i >= 0; i--) {
    if (xp >= XP_LEVELS[i].required_xp) {
      return XP_LEVELS[i];
    }
  }
  return XP_LEVELS[0];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞ streak
function getStreakMultiplier(streak) {
  if (streak >= 30) return 3.0;      // –º–µ—Å—è—Ü –ø–æ–¥—Ä—è–¥
  if (streak >= 14) return 2.5;      // –¥–≤–µ –Ω–µ–¥–µ–ª–∏
  if (streak >= 7) return 2.0;       // –Ω–µ–¥–µ–ª—è
  if (streak >= 3) return 1.5;       // 3 –¥–Ω—è
  return 1.0;
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async function awardXP(session, wordCorrectLevel, ctx) {
  if (!session.xp) session.xp = 0;
  if (!session.level) session.level = 1;
  
  const streak = session.streak || 0;
  const multiplier = getStreakMultiplier(streak);
  const xpGained = calculateXP(wordCorrectLevel, multiplier);
  
  const oldLevel = getLevelByXP(session.xp);
  session.xp += xpGained;
  const newLevel = getLevelByXP(session.xp);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  if (newLevel.level > oldLevel.level) {
    session.level = newLevel.level;
    const nextLevel = XP_LEVELS.find(l => l.level === newLevel.level + 1);
    const xpToNext = nextLevel ? nextLevel.required_xp - session.xp : 0;
    
    await ctx.reply(
      `üéâ <b>–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!</b> üéâ\n\n` +
      `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${newLevel.level}!\n` +
      `${newLevel.emoji} <b>${newLevel.title}</b>\n\n` +
      `üí´ –ü–æ–ª—É—á–µ–Ω–æ XP: +${xpGained}\n` +
      `‚≠ê –û–±—â–∏–π XP: ${session.xp}\n` +
      (nextLevel ? `üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${xpToNext} XP` : 'üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!'),
      { parse_mode: 'HTML' }
    );
  }
  
  return xpGained;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
function getMainMenuMessage(session) {
  const currentXP = session.xp || 0;
  const currentLevel = getLevelByXP(currentXP);
  const streak = session.streak || 0;
  const loginStreak = session.loginStreak || 0;
  
  let message = `${currentLevel.emoji} <b>–£—Ä–æ–≤–µ–Ω—å ${currentLevel.level}: ${currentLevel.title}</b>\n`;
  message += `‚≠ê XP: ${currentXP}`;
  
  const nextLevel = XP_LEVELS.find(l => l.level === currentLevel.level + 1);
  if (nextLevel) {
    const xpToNext = nextLevel.required_xp - currentXP;
    message += ` (–¥–æ ${nextLevel.level}: ${xpToNext})`;
  }
  message += `\n`;
  
  if (streak > 0) {
    message += `üî• Streak –∏–∑—É—á–µ–Ω–∏—è: ${streak} –¥–Ω–µ–π\n`;
  }
  if (loginStreak > 0) {
    message += `üìÖ Streak –≤—Ö–æ–¥–∞: ${loginStreak} –¥–Ω–µ–π\n`;
  }
  
  message += `\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  return message;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
async function checkDailyBonus(session, ctx) {
  const today = new Date().toDateString();
  const lastBonusDate = session.lastBonusDate;
  
  if (lastBonusDate === today) {
    return; // –£–∂–µ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
  }
  
  if (!session.loginStreak) session.loginStreak = 0;
  if (!session.xp) session.xp = 0;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–æ–≤
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const yesterdayStr = yesterday.toDateString();
  
  if (lastBonusDate === yesterdayStr) {
    session.loginStreak += 1;
  } else if (lastBonusDate !== today) {
    session.loginStreak = 1; // –°–±—Ä–æ—Å streak
  }
  
  // –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞
  let bonusXP = 0;
  const streak = session.loginStreak;
  
  if (streak === 1) bonusXP = 20;
  else if (streak === 2) bonusXP = 35;
  else if (streak === 3) bonusXP = 50;
  else if (streak === 7) bonusXP = 100;
  else if (streak === 14) bonusXP = 200;
  else if (streak === 30) bonusXP = 500;
  else if (streak >= 50) bonusXP = 1000;
  else bonusXP = Math.min(15 + streak * 8, 150); // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –±–æ–Ω—É—Å
  
  session.lastBonusDate = today;
  session.xp += bonusXP;
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  let specialReward = '';
  if (streak === 7) specialReward = '\nüèÜ –¢–∏—Ç—É–ª: "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—á–µ–Ω–∏–∫"';
  else if (streak === 14) specialReward = '\n‚≠ê –¢–∏—Ç—É–ª: "–ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è"';
  else if (streak === 30) specialReward = '\nüíé –¢–∏—Ç—É–ª: "–ú–∞—Å—Ç–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"';
  else if (streak === 50) specialReward = '\nüöÄ –¢–∏—Ç—É–ª: "–õ–µ–≥–µ–Ω–¥–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞"';
  
  await ctx.reply(
    `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!</b>\n\n` +
    `üìÖ –î–µ–Ω—å –≤—Ö–æ–¥–∞: ${streak}\n` +
    `üí´ –ë–æ–Ω—É—Å XP: +${bonusXP}\n` +
    `‚≠ê –û–±—â–∏–π XP: ${session.xp}` +
    specialReward,
    { parse_mode: 'HTML' }
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ—Å–ª–µ –±–æ–Ω—É—Å–∞
  const currentLevel = getLevelByXP(session.xp);
  if (currentLevel.level > (session.level || 1)) {
    session.level = currentLevel.level;
    await ctx.reply(
      `üåü –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ ${currentLevel.level}!\n${currentLevel.emoji} <b>${currentLevel.title}</b>`,
      { parse_mode: 'HTML' }
    );
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (session.profile) {
    await saveUserSession(ctx.from.id, session.profile, session);
  }
}

// --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
// sessions[userId].reminderTime = 'HH:MM' (24h)
bot.command('reminder', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId] || {};
  sessions[userId] = session;
  session.step = 'set_reminder_time';
  await ctx.reply('–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å? –ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 21:30)');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async function handleReminderTimeInput(ctx, text, session) {
  const match = text.match(/^(\d{1,2}):(\d{2})$/);
  if (!match) {
    await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00 –∏–ª–∏ 21:30');
    return;
  }
  let [_, h, m] = match;
  h = parseInt(h, 10);
  m = parseInt(m, 10);
  if (h < 0 || h > 23 || m < 0 || m > 59) {
    await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã 0-23, –º–∏–Ω—É—Ç—ã 0-59.');
    return;
  }
  session.reminderTime = `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;
  session.step = 'main_menu';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  if (session.profile) {
    await saveUserSession(ctx.from.id, session.profile, session);
  }
  
  await ctx.reply(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${session.reminderTime} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!`);
}

// --- –§–æ–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async function sendReminders() {
  const now = new Date();
  const hh = now.getHours().toString().padStart(2, '0');
  const mm = now.getMinutes().toString().padStart(2, '0');
  for (const userId in sessions) {
    const session = sessions[userId];
    if (!session.reminderTime) continue;
    if (`${hh}:${mm}` !== session.reminderTime) continue;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const words = session.profile ? await getWords(session.profile) : [];
    const lastActive = words.length ? new Date(Math.max(...words.map(w => new Date(w.updatedAt || w.createdAt)))) : null;
    if (isToday(lastActive)) continue; // –£–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–≥–æ–¥–Ω—è
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const quote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];
    try {
      await bot.api.sendMessage(userId, `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${quote}`);
    } catch (e) {
      // ignore errors (user blocked bot, etc)
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞—Ç—å sendReminders –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(sendReminders, 60 * 1000);

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = new Keyboard()
  .text('üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞')
  .text('üéØ –ó–∞–¥–∞–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º')
  .row()
  .text('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å')
  .row();

// –ü–æ–¥–º–µ–Ω—é: –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞
const addWordsMainMenu = new Keyboard()
  .text('‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–ª–æ–≤–æ')
  .row()
  .text('üìö –°–ª–æ–≤–∞ –∏–∑ Oxford 3000')
  .text('ÔøΩ –°–ª–æ–≤–∞ –∏–∑ IELTS')
  .row()
  .text('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
  .row();

// –ü–æ–¥–º–µ–Ω—é: –∑–∞–¥–∞–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
const wordTasksMenu = new Keyboard()
  .text('üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ')
  .row()
  .text('ÔøΩ –£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥')
  .row()
  .text('ÔøΩüé≠ –°–∏—Ç—É–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è')
  .text('üì∫ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏')
  .row()
  .text('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
  .row();

// –ú–µ–Ω—é —Å–∏—Ç—É–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π - 15 –º–µ—Å—Ç
const situationalMenu = new Keyboard()
  .text('‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç')
  .text('üèõÔ∏è –ú—É–∑–µ–π')
  .text('üè• –ë–æ–ª—å–Ω–∏—Ü–∞')
  .row()
  .text('üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω')
  .text('üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω')
  .text('üè® –û—Ç–µ–ª—å')
  .row()
  .text('üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
  .text('üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞')
  .text('‚öΩ –°—Ç–∞–¥–∏–æ–Ω')
  .row()
  .text('üè¢ –û—Ñ–∏—Å')
  .text('üè¶ –ë–∞–Ω–∫')
  .text('üõ£Ô∏è –£–ª–∏—Ü–∞')
  .row()
  .text('üé≠ –¢–µ–∞—Ç—Ä')
  .text('üöó –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å')
  .text('üè´ –®–∫–æ–ª–∞')
  .row()
  .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
  .row();

// –ú–µ–Ω—é –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –∂–∏–∑–Ω–∏
const examplesMenu = new Keyboard()
  .text('üì∞ –ü—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π')
  .text('üé¨ –ü—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ —Ñ–∏–ª—å–º–æ–≤')
  .row()
  .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
  .row();

// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
const wordsCountMenu = new Keyboard()
  .text('7 —Å–ª–æ–≤')
  .text('10 —Å–ª–æ–≤')
  .row()
  .text('15 —Å–ª–æ–≤')
  .text('20 —Å–ª–æ–≤')
  .row()
  .text('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
  .row();

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è AI-—Å–ª–æ–≤
const aiLevelsMenu = new Keyboard()
  .text('Preintermediate')
  .text('Intermediate, Upper Intermediate')
  .row()
  .text('Advanced, Influenced')
  .text('Ielts —Å–ª–æ–≤–∞')
  .row();

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è oxford3000.json
let oxford3000 = [];
try {
  oxford3000 = JSON.parse(fs.readFileSync('oxford3000.json', 'utf8'));
} catch (e) {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å oxford3000.json:', e);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è IELTS must-have
let ieltsWords = [];
try {
  ieltsWords = JSON.parse(fs.readFileSync('ielts.json', 'utf8'));
} catch (e) {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ielts.json:', e);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Å–ª–æ–≤
function getFirstTwoWords(str) {
  return str.split(/\s+/).slice(0, 2).join(' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ oxford3000
const getOxfordSectionsMenu = () => {
  const sections = Array.from(new Set(oxford3000.map(w => w.section)));
  const rows = sections.map(s => [s]);
  return Keyboard.from(rows).row();
};

// --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async function getOrCreateUserProfile(telegramId, profileName) {
  const profileKey = `${telegramId}_${profileName}`;
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    let userProfile = await prisma.userProfile.findFirst({
      where: { 
        telegramId: telegramId.toString(),
        profileName: profileName 
      }
    });
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!userProfile) {
      userProfile = await prisma.userProfile.create({
        data: {
          telegramId: telegramId.toString(),
          profileName: profileName,
          xp: 0,
          level: 1,
          loginStreak: 0,
          lastBonusDate: null,
          lastSmartRepeatDate: null,
          reminderTime: null
        }
      });
    }
    
    return userProfile;
  } catch (error) {
    console.error('Error getting/creating user profile:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –ë–î
    return {
      xp: 0,
      level: 1,
      loginStreak: 0,
      lastBonusDate: null,
      lastSmartRepeatDate: null,
      reminderTime: null
    };
  }
}

// --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –ë–î ---
async function saveUserSession(telegramId, profileName, session) {
  try {
    await prisma.userProfile.updateMany({
      where: { 
        telegramId: telegramId.toString(),
        profileName: profileName 
      },
      data: {
        xp: session.xp || 0,
        level: session.level || 1,
        loginStreak: session.loginStreak || 0,
        lastBonusDate: session.lastBonusDate,
        lastSmartRepeatDate: session.lastSmartRepeatDate,
        reminderTime: session.reminderTime
      }
    });
  } catch (error) {
    console.error('Error saving user session:', error);
  }
}

// --- Prisma-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π ---
async function addWord(profile, word, translation, section) {
  await prisma.word.create({
    data: {
      profile,
      word,
      translation,
      section: section || null,
    },
  });
}

async function getWords(profile, filter = {}) {
  return prisma.word.findMany({
    where: {
      profile,
      ...(filter.section ? { section: filter.section } : {}),
    },
    orderBy: { id: 'asc' },
  });
}

async function updateWordCorrect(profile, word, translation, correct) {
  await prisma.word.updateMany({
    where: { profile, word, translation },
    data: { correct },
  });
}

// /start ‚Äî –Ω–∞—á–∞–ª–æ —Å–µ–∞–Ω—Å–∞
bot.command('start', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const existingProfiles = await prisma.userProfile.findMany({
      where: { telegramId: userId.toString() }
    });
    
    if (existingProfiles.length > 0) {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
      if (existingProfiles.length > 1) {
        sessions[userId] = { step: 'awaiting_profile' };
        return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:', {
          reply_markup: {
            keyboard: [['–ê–º–∏–Ω–∞', '–ù—É—Ä–±–æ–ª–∞—Ç']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∏–º –µ–≥–æ
      const profile = existingProfiles[0];
      
      sessions[userId] = {
        profile: profile.profileName,
        step: 'main_menu',
        xp: profile.xp,
        level: profile.level,
        loginStreak: profile.loginStreak,
        lastBonusDate: profile.lastBonusDate,
        lastSmartRepeatDate: profile.lastSmartRepeatDate,
        reminderTime: profile.reminderTime
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
      await checkDailyBonus(sessions[userId], ctx);
      const menuMessage = getMainMenuMessage(sessions[userId]);
      await ctx.reply(menuMessage, { reply_markup: mainMenu, parse_mode: 'HTML' });
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      sessions[userId] = { step: 'awaiting_password' };
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    }
  } catch (error) {
    console.error('Error in /start command:', error);
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –ë–î, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é —Å–µ—Å—Å–∏—é
    sessions[userId] = { step: 'awaiting_password' };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
  }
});

// /menu ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —à–∞–≥–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
bot.command('menu', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  if (!session || session.step === 'awaiting_password' || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  const profile = session.profile;
  sessions[userId] = { ...session, step: 'main_menu', profile };
  const menuMessage = getMainMenuMessage(sessions[userId]);
  return ctx.reply(menuMessage, { reply_markup: mainMenu, parse_mode: 'HTML' });
});

// --- –ö–æ–º–∞–Ω–¥–∞ /words: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
bot.command('words', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  const args = ctx.message.text.split(' ').slice(1);
  const section = args.length > 0 ? args.join(' ') : null;
  
  try {
    const filter = section ? { section } : {};
    const words = await getWords(session.profile, filter);
    
    if (!words.length) {
      const msg = section 
        ? `–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "${section}"`
        : '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤';
      return ctx.reply(msg);
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    const sections = {};
    words.forEach(word => {
      const sec = word.section || '–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∞';
      if (!sections[sec]) sections[sec] = [];
      sections[sec].push(word);
    });
    
    let message = section 
      ? `<b>–°–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "${section}":</b>\n\n`
      : '<b>–í–∞—à–∏ —Å–ª–æ–≤–∞:</b>\n\n';
    
    for (const [sec, sectionWords] of Object.entries(sections)) {
      if (!section) {
        message += `<b>${sec}:</b>\n`;
      }
      
      sectionWords.forEach(word => {
        const correct = word.correct || 0;
        let status = '';
        if (correct <= 2) status = 'üî¥';
        else if (correct <= 4) status = 'üü°';
        else status = 'üü¢';
        
        message += `${status} <code>${word.word}</code> ‚Äî ${word.translation}\n`;
      });
      
      if (!section) message += '\n';
    }
    
    message += '\n<i>üî¥ –Ω–æ–≤—ã–µ (‚â§2), üü° –∏–∑—É—á–∞–µ–º—ã–µ (3-4), üü¢ –∏–∑—É—á–µ–Ω–Ω—ã–µ (‚â•5)</i>';
    message += '\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete [—Å–ª–æ–≤–æ]';
    
    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in /words:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤');
  }
});

// --- –ö–æ–º–∞–Ω–¥–∞ /delete: —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ---
bot.command('delete', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length === 0) {
    return ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /delete [—Å–ª–æ–≤–æ]');
  }
  
  const wordToDelete = args.join(' ').toLowerCase();
  
  try {
    const deletedWords = await prisma.word.deleteMany({
      where: {
        profile: session.profile,
        word: { equals: wordToDelete, mode: 'insensitive' }
      }
    });
    
    if (deletedWords.count === 0) {
      return ctx.reply(`–°–ª–æ–≤–æ "${wordToDelete}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    
    await ctx.reply(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedWords.count} –∑–∞–ø–∏—Å–µ–π —Å–æ —Å–ª–æ–≤–æ–º "${wordToDelete}"`);
  } catch (error) {
    console.error('Error in /delete:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
  }
});

// --- –ö–æ–º–∞–Ω–¥–∞ /clear: –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ ---
bot.command('clear', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
  const wordCount = await prisma.word.count({
    where: { profile: session.profile }
  });
  
  if (wordCount === 0) {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  session.awaitingClearConfirmation = true;
  await ctx.reply(
    `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï ${wordCount} —Å–ª–æ–≤?\n\n` +
    '–ù–∞–ø–∏—à–∏—Ç–µ "–î–ê" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã'
  );
});

// --- –ö–æ–º–∞–Ω–¥–∞ /sections: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã ---
bot.command('sections', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  try {
    const sections = await prisma.word.groupBy({
      by: ['section'],
      where: { profile: session.profile },
      _count: { id: true }
    });
    
    if (!sections.length) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤');
    }
    
    let message = '<b>–í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã:</b>\n\n';
    
    sections
      .sort((a, b) => b._count.id - a._count.id)
      .forEach(section => {
        const name = section.section || '–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∞';
        const count = section._count.id;
        message += `üìÇ <b>${name}</b> ‚Äî ${count} —Å–ª–æ–≤\n`;
      });
    
    message += '\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: /words [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞]';
    

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('Error in /sections:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤');
  }
});

// --- –ö–æ–º–∞–Ω–¥–∞ /achievements: –ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ---
// --- –õ–µ–Ω–∏–≤–µ—Ü –¥–Ω—è: —Ç—Ä–µ–∫–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
function isToday(date) {
  if (!date) return false;
  const d = new Date(date);
  const today = new Date();
  return d.getFullYear() === today.getFullYear() && d.getMonth() === today.getMonth() && d.getDate() === today.getDate();
}

// –õ–µ–Ω–∏–≤–µ—Ü –¥–Ω—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–µ—Å—Å–∏–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –±–∞–∑—É)
function setSlothOfTheDay(session) {
  session.slothOfTheDay = true;
  session.streak = 0;
  session.lastSlothDate = new Date();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è)
async function checkUserInactivity(session, words, ctx) {
  // –ï—Å–ª–∏ —Å–ª–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç, –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–µ–Ω–∏–≤—Ü–µ–º
  if (words.length === 0) {
    session.slothOfTheDay = false;
    return false;
  }
  
  // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî –ø–æ updatedAt –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞
  const lastActive = words.length ? new Date(Math.max(...words.map(w => new Date(w.updatedAt || w.createdAt)))) : null;
  if (!isToday(lastActive)) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ª–µ–Ω–∏–≤—Ü–µ–º —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    if (!session.slothOfTheDay || !isToday(session.lastSlothDate)) {
      setSlothOfTheDay(session);
      // –®—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∫–æ–ª–æ–º
      if (ctx) {
        const jokes = [
          'üò¥ –°–µ–≥–æ–¥–Ω—è –≤—ã ‚Äî –õ–µ–Ω–∏–≤–µ—Ü –¥–Ω—è! –°—Ç—Ä–∏–∫ –æ–±–Ω—É–ª–∏–ª—Å—è, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å ‚Äî –¥–∞–∂–µ –ª–µ–Ω–∏–≤—Ü—ã –∏–Ω–æ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —á–µ–º–ø–∏–æ–Ω–∞–º–∏! ü¶•',
          'ü¶• –û–π-–æ–π, –∫—Ç–æ —ç—Ç–æ —Ç—É—Ç –∑–∞–±—ã–ª –ø—Ä–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π? –õ–µ–Ω–∏–≤–µ—Ü –¥–Ω—è –æ–±—ä—è–≤–ª–µ–Ω! –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —à–∞–Ω—Å!',
          'üòÖ –í–∞—à —Å—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω, –∞ —Ç–∏—Ç—É–ª "–õ–µ–Ω–∏–≤–µ—Ü –¥–Ω—è" –ø—Ä–∏—Å–≤–æ–µ–Ω! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –¥–∞–∂–µ —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥—ã—Ö–∞—é—Ç.',
          'ü¶• –õ–µ–Ω–∏–≤–µ—Ü –¥–Ω—è! –ú–æ–∂–µ—Ç, —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞? –ù–æ –∑–∞–≤—Ç—Ä–∞ ‚Äî —Å–Ω–æ–≤–∞ –≤ –±–æ–π!'
        ];
        const joke = jokes[Math.floor(Math.random() * jokes.length)];
        await ctx.reply(joke);
      }
    }
    return true;
  }
  session.slothOfTheDay = false;
  return false;
}

// --- –°–∏—Ç—É–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ---

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT
async function generateSituation(location) {
  const locationMap = {
    '‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç': '–∞—ç—Ä–æ–ø–æ—Ä—Ç',
    'üèõÔ∏è –ú—É–∑–µ–π': '–º—É–∑–µ–π',
    'üè• –ë–æ–ª—å–Ω–∏—Ü–∞': '–±–æ–ª—å–Ω–∏—Ü–∞',
    'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
    'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω': '–º–∞–≥–∞–∑–∏–Ω',
    'üè® –û—Ç–µ–ª—å': '–æ—Ç–µ–ª—å',
    'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    'üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
    '‚öΩ –°—Ç–∞–¥–∏–æ–Ω': '—Å—Ç–∞–¥–∏–æ–Ω',
    'üè¢ –û—Ñ–∏—Å': '–æ—Ñ–∏—Å',
    'üè¶ –ë–∞–Ω–∫': '–±–∞–Ω–∫',
    'üõ£Ô∏è –£–ª–∏—Ü–∞': '—É–ª–∏—Ü–∞',
    'üé≠ –¢–µ–∞—Ç—Ä': '—Ç–µ–∞—Ç—Ä',
    'üöó –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å': '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å',
    'üè´ –®–∫–æ–ª–∞': '—à–∫–æ–ª–∞'
  };
  
  const place = locationMap[location] || location;
  
  const prompt = `–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –º–µ—Å—Ç–µ: ${place}.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–∏—Ç—É–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π
- –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–Ω–µ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è, –Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è)
- –°–∏—Ç—É–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–≤—É—Ö —Ç–∏–ø–æ–≤:
  1) –ì–¥–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –°–ö–ê–ó–ê–¢–¨ (–¥–∏–∞–ª–æ–≥, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å)
  2) –ì–¥–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –°–î–ï–õ–ê–¢–¨ (–¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É)
- –î–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —é–º–æ—Ä–∞ –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏
- –û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö):
1. –°–ù–ê–ß–ê–õ–ê –í–°–Ø –°–ò–¢–£–ê–¶–ò–Ø –ù–ê –ê–ù–ì–õ–ò–ô–°–ö–û–ú
2. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
3. –ó–ê–¢–ï–ú –í–°–Ø –°–ò–¢–£–ê–¶–ò–Ø –ù–ê –†–£–°–°–ö–û–ú
4. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
5. What will you say/do in this situation?
6. –ß—Ç–æ –≤—ã —Å–∫–∞–∂–µ—Ç–µ/—Å–¥–µ–ª–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
While a client is filling out a form to open a bank account, you notice that he is writing his date of birth and address incorrectly. He is confident that everything is correct.

–ü–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞ –≤ –±–∞–Ω–∫–µ, –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ, —á—Ç–æ –æ–Ω –ø–∏—à–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –û–Ω —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ.

What will you say/do in this situation?
–ß—Ç–æ –≤—ã —Å–∫–∞–∂–µ—Ç–µ/—Å–¥–µ–ª–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?

–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 300,
      temperature: 0.8
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏:', error);
    return `You are at: ${place}. An interesting situation requires your attention.\n\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ—Å—Ç–µ: ${place}. –í–æ–∑–Ω–∏–∫–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, —Ç—Ä–µ–±—É—é—â–∞—è –≤–∞—à–µ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.\n\nWhat will you say or do in this situation?\n–ß—Ç–æ –≤—ã —Å–∫–∞–∂–µ—Ç–µ –∏–ª–∏ —Å–¥–µ–ª–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ ChatGPT
async function checkGrammar(userResponse) {
  const prompt = `–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–∏–¥–±–µ–∫:

"${userResponse}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∏–¥–±–µ–∫—É:
- –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–ª—å–∫–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–∞—Ä—Ç–∏–∫–ª–∏, –≤—Ä–µ–º–µ–Ω–∞, –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ —Ç.–¥.)
- –ù–ï –ø—Ä–æ–≤–µ—Ä—è–π –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
- –£—á—Ç–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∫–∞–∫ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ—á—å ("I would say..."), —Ç–∞–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è ("I would write...")
- –î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏
- –ü—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
- –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø–æ—Ö–≤–∞–ª–∏ –∏ –æ—Ç–º–µ—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
- –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
- –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
‚úÖ –ß—Ç–æ —Ö–æ—Ä–æ—à–æ: [–ø–æ—Ö–≤–∞–ª–∞]
‚ùå –û—à–∏–±–∫–∏: [–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏]
üí° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: [–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç]

–ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª "‚ùå –û—à–∏–±–∫–∏".`;

  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 400,
      temperature: 0.3
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:', error);
    return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.';
  }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –∂–∏–∑–Ω–∏ ---

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
async function searchNewsExamples(word) {
  try {
    const prompt = `–°–æ–∑–¥–∞–π 3 –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ "${word}" –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π.

–í–ê–ñ–ù–û:
- –≠—Ç–æ –û–ë–£–ß–ê–Æ–©–ò–ï –ø—Ä–∏–º–µ—Ä—ã, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
- –í –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ "${word}"
- –í—ã–¥–µ–ª–∏ —Å–ª–æ–≤–æ "${word}" –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º: **${word}**
- –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°—Ç–∏–ª—å –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –æ—Ç—Ä—ã–≤–∫–æ–≤ –∏–∑ —Å—Ç–∞—Ç–µ–π —Å–æ —Å–ª–æ–≤–æ–º "${word}"
- –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
- –£–∫–∞–∑–∞—Ç—å —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (Business News, Tech News, Sports, etc.)
- –î–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥/–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. **[–¢–∏–ø –Ω–æ–≤–æ—Å—Ç–∏]**: "–¢–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º **${word}**"
   –ü–µ—Ä–µ–≤–æ–¥: "..."
   
2. **[–¢–∏–ø –Ω–æ–≤–æ—Å—Ç–∏]**: "–¢–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º **${word}**"
   –ü–µ—Ä–µ–≤–æ–¥: "..."

3. **[–¢–∏–ø –Ω–æ–≤–æ—Å—Ç–∏]**: "–¢–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º **${word}**"
   –ü–µ—Ä–µ–≤–æ–¥: "..."`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 800,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', error);
    return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤–∞ "${word}" –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤
async function searchMovieExamples(word) {
  try {
    const prompt = `–°–æ–∑–¥–∞–π 3 –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ "${word}" –≤ —Å—Ç–∏–ª–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤.

–í–ê–ñ–ù–û:
- –≠—Ç–æ –û–ë–£–ß–ê–Æ–©–ò–ï –ø—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ –∫–∏–Ω–æ–¥–∏–∞–ª–æ–≥–æ–≤, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
- –í –∫–∞–∂–¥–æ–º –ø—Ä–∏–º–µ—Ä–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ "${word}"
- –í—ã–¥–µ–ª–∏ —Å–ª–æ–≤–æ "${word}" –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º: **${word}**
- –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°—Ç–∏–ª—å –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ —Å–æ —Å–ª–æ–≤–æ–º "${word}"
- –£–∫–∞–∑–∞—Ç—å –∂–∞–Ω—Ä –∏–ª–∏ —Ç–∏–ø —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –î–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
- –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. **[–ñ–∞–Ω—Ä/–¢–∏–ø] - –ü–µ—Ä—Å–æ–Ω–∞–∂:**
   "–î–∏–∞–ª–æ–≥ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º **${word}**"
   –ö–æ–Ω—Ç–µ–∫—Å—Ç: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
   –ü–µ—Ä–µ–≤–æ–¥: "..."

2. **[–ñ–∞–Ω—Ä/–¢–∏–ø] - –ü–µ—Ä—Å–æ–Ω–∞–∂:**
   "–î–∏–∞–ª–æ–≥ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º **${word}**"
   –ö–æ–Ω—Ç–µ–∫—Å—Ç: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏  
   –ü–µ—Ä–µ–≤–æ–¥: "..."

3. **[–ñ–∞–Ω—Ä/–¢–∏–ø] - –ü–µ—Ä—Å–æ–Ω–∞–∂:**
   "–î–∏–∞–ª–æ–≥ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º **${word}**"
   –ö–æ–Ω—Ç–µ–∫—Å—Ç: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
   –ü–µ—Ä–µ–≤–æ–¥: "..."

–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª–∏ —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤: –¥—Ä–∞–º–∞, –∫–æ–º–µ–¥–∏—è, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –±–æ–µ–≤–∏–∫, etc.`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo', 
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 800,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤:', error);
    return `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤–∞ "${word}" –≤ —Ñ–∏–ª—å–º–∞—Ö/—Å–µ—Ä–∏–∞–ª–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.`;
  }
}

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('checkdb', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || session.profile !== '–ù—É—Ä–±–æ–ª–∞—Ç') {
    return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    const totalWords = await prisma.word.count();
    console.log(`Total words in database: ${totalWords}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    const profiles = await prisma.word.groupBy({
      by: ['profile'],
      _count: { id: true }
    });
    
    console.log('Profiles and word counts:', profiles);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
    const recentWords = await prisma.word.findMany({
      take: 20,
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        profile: true,
        word: true,
        translation: true,
        section: true,
        correct: true,
        createdAt: true
      }
    });
    
    console.log('Recent words:', recentWords);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥)
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    
    const oldWords = await prisma.word.findMany({
      where: {
        createdAt: {
          lt: oneWeekAgo
        }
      },
      take: 10,
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        profile: true,
        word: true,
        translation: true,
        section: true,
        correct: true,
        createdAt: true
      }
    });
    
    console.log('Old words (older than 1 week):', oldWords);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let message = `üìä <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n\n`;
    message += `üî¢ <b>–í—Å–µ–≥–æ —Å–ª–æ–≤:</b> ${totalWords}\n\n`;
    
    if (profiles.length > 0) {
      message += `üë• <b>–ü—Ä–æ—Ñ–∏–ª–∏:</b>\n`;
      profiles.forEach(p => {
        message += `‚Ä¢ ${p.profile}: ${p._count.id} —Å–ª–æ–≤\n`;
      });
      message += `\n`;
    } else {
      message += `‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n`;
    }
    
    if (recentWords.length > 0) {
      message += `üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${recentWords.length} —Å–ª–æ–≤:</b>\n`;
      recentWords.slice(0, 10).forEach(w => {
        const date = w.createdAt.toLocaleDateString();
        message += `‚Ä¢ ${w.word} ‚Äî ${w.translation} (${w.profile}, ${date})\n`;
      });
      message += `\n`;
    }
    
    if (oldWords.length > 0) {
      message += `‚è∞ <b>–°—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞ (—Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏):</b>\n`;
      oldWords.slice(0, 5).forEach(w => {
        const date = w.createdAt.toLocaleDateString();
        message += `‚Ä¢ ${w.word} ‚Äî ${w.translation} (${w.profile}, ${date})\n`;
      });
      message += `\n`;
    } else {
      message += `‚ö†Ô∏è <b>–°—Ç–∞—Ä—ã—Ö —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b> –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\n`;
    }
    
    message += `üí° –ï—Å–ª–∏ –≤–∞—à–∏ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
    
    await ctx.reply(message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('‚ùå Error checking database:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã: ${error.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù—É—Ä–±–æ–ª–∞—Ç)
bot.command('backups', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  if (session.profile !== '–ù—É—Ä–±–æ–ª–∞—Ç') {
    return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ backups
    const backupDir = 'backups';
    if (!fs.existsSync(backupDir)) {
      return ctx.reply('üìÅ –ü–∞–ø–∫–∞ —Å –±—ç–∫–∞–ø–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø –∫–æ–º–∞–Ω–¥–æ–π /backup');
    }
    
    // –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –≤ –ø–∞–ø–∫–µ
    const files = fs.readdirSync(backupDir).filter(file => 
      file.startsWith('backup-') && file.endsWith('.json')
    );
    
    if (files.length === 0) {
      return ctx.reply('üìÅ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø –∫–æ–º–∞–Ω–¥–æ–π /backup');
    }
    
    let message = `üìÇ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:</b>\n\n`;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    files.sort().reverse();
    
    for (let i = 0; i < Math.min(files.length, 10); i++) {
      const file = files[i];
      const filePath = `${backupDir}/${file}`;
      const stats = fs.statSync(filePath);
      const date = stats.mtime.toLocaleString('ru');
      const size = (stats.size / 1024).toFixed(1);
      
      message += `üìÑ <code>${file}</code>\n`;
      message += `üìÖ ${date}\n`;
      message += `üíæ ${size} KB\n\n`;
    }
    
    if (files.length > 10) {
      message += `–ò –µ—â–µ ${files.length - 10} –±—ç–∫–∞–ø–æ–≤...\n\n`;
    }
    
    message += `üí° <b>–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å:</b>\n`;
    message += `‚Ä¢ /backup - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª\n`;
    message += `‚Ä¢ /getbackup –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–π–ª–∞ - —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π\n`;
    message += `‚Ä¢ –§–∞–π–ª—ã —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å`;
    
    await ctx.reply(message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error listing backups:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù—É—Ä–±–æ–ª–∞—Ç)
bot.command('getbackup', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  if (session.profile !== '–ù—É—Ä–±–æ–ª–∞—Ç') {
    return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
  
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    return ctx.reply('üìÅ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞.\n–ü—Ä–∏–º–µ—Ä: /getbackup backup-2025-01-24T15-30-00-000Z.json\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: /backups');
  }
  
  const fileName = args[1];
  const filePath = `backups/${fileName}`;
  
  try {
    if (!fs.existsSync(filePath)) {
      return ctx.reply(`‚ùå –§–∞–π–ª "${fileName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ backups.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /backups`);
    }
    
    if (!fileName.startsWith('backup-') || !fileName.endsWith('.json')) {
      return ctx.reply('‚ùå –ú–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ (backup-*.json)');
    }
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Buffer
    const fileBuffer = fs.readFileSync(filePath);
    
    await ctx.replyWithDocument(new InputFile(fileBuffer, fileName), {
      caption: `üì¶ –ë—ç–∫–∞–ø: ${fileName}\nüïê ${new Date().toLocaleString('ru')}`
    });
    
  } catch (error) {
    console.error('Error sending backup:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ù—É—Ä–±–æ–ª–∞—Ç)
bot.command('backup', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  if (session.profile !== '–ù—É—Ä–±–æ–ª–∞—Ç') {
    return ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
  
  await ctx.reply('üì¶ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const backupFile = await createBackup();
    if (backupFile) {
      try {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Buffer
        const fileBuffer = fs.readFileSync(backupFile);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const fileName = backupFile.split('/').pop();
        
        await ctx.replyWithDocument(new InputFile(fileBuffer, fileName), {
          caption: `‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nüïê ${new Date().toLocaleString('ru')}`
        });
        
        // –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–∞–ø–∫–µ backups –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
      } catch (error) {
        console.error('Error sending backup file:', error);
        await ctx.reply(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupFile}\n–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
      }
    } else {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞');
    }
  } catch (error) {
    console.error('Backup command error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: ${error.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('restore', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (!session || (session.profile !== '–ù—É—Ä–±–æ–ª–∞—Ç' && session.profile !== '–ê–º–∏–Ω–∞')) {
    return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  
  await ctx.reply('üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ (.json) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  session.step = 'awaiting_backup_file';
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–∞
bot.on('message:document', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  
  if (session && session.step === 'awaiting_backup_file') {
    const file = ctx.message.document;
    
    if (!file.file_name.endsWith('.json')) {
      return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞');
    }
    
    try {
      await ctx.reply('üîÑ –°–∫–∞—á–∏–≤–∞—é –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
      const fileInfo = await bot.api.getFile(file.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${bot.token}/${fileInfo.file_path}`;
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const response = await axios.get(fileUrl);
      const tempFileName = `temp-restore-${Date.now()}.json`;
      fs.writeFileSync(tempFileName, JSON.stringify(response.data, null, 2));
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      const success = await restoreFromBackup(tempFileName);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(tempFileName);
      
      session.step = 'main_menu';
      
      if (success) {
        await ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!', { reply_markup: mainMenu });
      } else {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', { reply_markup: mainMenu });
      }
      
    } catch (error) {
      console.error('Restore error:', error);
      session.step = 'main_menu';
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, { reply_markup: mainMenu });
    }
  }
});

bot.command('achievements', async (ctx) => {
  const userId = ctx.from.id;
  const session = sessions[userId];
  if (!session || !session.profile) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  await checkDailyBonus(session, ctx);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const words = await getWords(session.profile);
  const total = words.length;
  const mastered = words.filter(w => (w.correct || 0) >= 5).length;
  
  // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–Ω–∏–≤—Ü–∞ –¥–Ω—è ---
  await checkUserInactivity(session, words, ctx);
  
  // --- XP –∏ —É—Ä–æ–≤–µ–Ω—å ---
  const currentXP = session.xp || 0;
  const currentLevel = getLevelByXP(currentXP);
  const nextLevel = XP_LEVELS.find(l => l.level === currentLevel.level + 1);
  const xpToNext = nextLevel ? nextLevel.required_xp - currentXP : 0;
  const loginStreak = session.loginStreak || 0;
  
  // --- Streak ---
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ updatedAt, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ createdAt)
  const dates = words
    .map(w => w.updatedAt || w.createdAt)
    .filter(Boolean)
    .map(d => new Date(d).toDateString());
  const uniqueDays = Array.from(new Set(dates)).sort();
  let studyStreak = session.streak || 0;
  if (!session.slothOfTheDay) {
    // –°—á–∏—Ç–∞–µ–º streak (–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é)
    if (uniqueDays.length) {
      let prev = new Date(uniqueDays[uniqueDays.length - 1]);
      studyStreak = 1;
      for (let i = uniqueDays.length - 2; i >= 0; i--) {
        const curr = new Date(uniqueDays[i]);
        const diff = (prev - curr) / (1000 * 60 * 60 * 24);
        if (diff === 1) {
          studyStreak++;
          prev = curr;
        } else if (diff > 1) {
          break;
        }
      }
    }
    session.streak = studyStreak;
  } else {
    studyStreak = 0;
    session.streak = 0;
  }
  
  // --- –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä XP ---
  const xpMultiplier = getStreakMultiplier(studyStreak);
  
  // --- –ê—á–∏–≤–∫–∏ ---
  const achievements = [];
  // –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
  if (total >= 1) achievements.push('üå± –ù–æ–≤–∏—á–æ–∫ ‚Äî 1 —Å–ª–æ–≤–æ');
  if (total >= 5) achievements.push('üë£ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ ‚Äî 5 —Å–ª–æ–≤');
  if (total >= 10) achievements.push('üèÖ –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å ‚Äî 10 —Å–ª–æ–≤');
  if (total >= 25) achievements.push('üìö –ú–∞–ª–µ–Ω—å–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Äî 25 —Å–ª–æ–≤');
  if (total >= 50) achievements.push('ü•à –ü–æ–ª—Å–æ—Ç–Ω–∏ ‚Äî 50 —Å–ª–æ–≤');
  if (total >= 100) achievements.push('ü•á –°–æ—Ç–Ω—è ‚Äî 100 —Å–ª–æ–≤');
  if (total >= 200) achievements.push('‚ö° –ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º ‚Äî 200 —Å–ª–æ–≤');
  if (total >= 500) achievements.push('üëë –ì—É—Ä—É —Å–ª–æ–≤ ‚Äî 500 —Å–ª–æ–≤');
  
  // –ü–æ –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º
  if (mastered >= 10) achievements.push('üü¢ –ú–∞—Å—Ç–µ—Ä 10 ‚Äî 10 –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤');
  if (mastered >= 50) achievements.push('üü¢ –°–ª–æ–≤–æ-–º–∞–≥ ‚Äî 50 –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤');
  if (mastered >= 100) achievements.push('üü¢ –°—É–ø–µ—Ä—Å—Ç–∞—Ä ‚Äî 100 –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤');
  
  // –ü–æ streak –∏–∑—É—á–µ–Ω–∏—è
  if (studyStreak >= 2) achievements.push('üî• –†–∞–∑–æ–≥—Ä–µ–≤ ‚Äî 2 –¥–Ω—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
  if (studyStreak >= 3) achievements.push('üî• –ù–µ —Å–¥–∞—é—Å—å ‚Äî 3 –¥–Ω—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
  if (studyStreak >= 7) achievements.push('üî• –ù–µ–¥–µ–ª—è —Å–∏–ª—ã ‚Äî 7 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
  if (studyStreak >= 14) achievements.push('üî• –î–≤–µ –Ω–µ–¥–µ–ª–∏ ‚Äî 14 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
  if (studyStreak >= 30) achievements.push('üî• –ú–µ—Å—è—Ü —Å–∏–ª—ã ‚Äî 30 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
  if (studyStreak >= 50) achievements.push('üî• –ù–µ—Å–≥–∏–±–∞–µ–º—ã–π ‚Äî 50 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
  if (studyStreak >= 100) achievements.push('üî• –ú–∞—Å—Ç–µ—Ä –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Äî 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥');
  
  // –ü–æ —É—Ä–æ–≤–Ω—è–º
  if (currentLevel.level >= 2) achievements.push(`${currentLevel.emoji} ${currentLevel.title} ‚Äî —É—Ä–æ–≤–µ–Ω—å ${currentLevel.level}`);
  if (currentLevel.level >= 5) achievements.push('üéØ –°–µ—Ä—å—ë–∑–Ω—ã–π –∏–≥—Ä–æ–∫ ‚Äî —É—Ä–æ–≤–µ–Ω—å 5+');
  if (currentLevel.level >= 8) achievements.push('üåü –≠–ª–∏—Ç–∞ ‚Äî —É—Ä–æ–≤–µ–Ω—å 8+');
  if (currentLevel.level >= 10) achievements.push('üöÄ –õ–µ–≥–µ–Ω–¥–∞ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!');
  
  // –ü–æ login streak
  if (loginStreak >= 7) achievements.push('üìÖ –ù–µ–¥–µ–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ ‚Äî 7 –¥–Ω–µ–π –≤—Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥');
  if (loginStreak >= 30) achievements.push('üìÖ –ú–µ—Å—è—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ‚Äî 30 –¥–Ω–µ–π –≤—Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥');
  if (loginStreak >= 100) achievements.push('üìÖ –ú–∞—à–∏–Ω–∞ –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äî 100 –¥–Ω–µ–π –≤—Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥');
  
  let msg = `üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n`;
  
  // --- –£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
  msg += `${currentLevel.emoji} <b>–£—Ä–æ–≤–µ–Ω—å ${currentLevel.level}: ${currentLevel.title}</b>\n`;
  msg += `‚≠ê XP: ${currentXP}\n`;
  if (nextLevel) {
    const progress = Math.round(((currentXP - currentLevel.required_xp) / (nextLevel.required_xp - currentLevel.required_xp)) * 100);
    msg += `üéØ –î–æ —É—Ä–æ–≤–Ω—è ${nextLevel.level}: ${xpToNext} XP (${progress}%)\n`;
  } else {
    msg += `üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
  }
  msg += `\n`;
  
  // --- Streaks –∏ –±–æ–Ω—É—Å—ã ---
  msg += `üî• <b>Streak –∏–∑—É—á–µ–Ω–∏—è:</b> ${studyStreak} –¥–Ω–µ–π\n`;
  msg += `üìÖ <b>Streak –≤—Ö–æ–¥–∞:</b> ${loginStreak} –¥–Ω–µ–π\n`;
  msg += `‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å XP:</b> x${xpMultiplier.toFixed(1)}\n\n`;
  
  // --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
  msg += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
  msg += `–í—Å–µ–≥–æ —Å–ª–æ–≤: ${total}\n`;
  msg += `–û—Ç–ª–∏—á–Ω–æ –∏–∑—É—á–µ–Ω–æ: ${mastered}\n\n`;
  
  // --- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
  msg += `üèÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n`;
  if (achievements.length) {
    msg += achievements.map(a => `‚Ä¢ ${a}`).join('\n');
  } else {
    msg += '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!';
  }
  
  await ctx.reply(msg, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message:text', async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text.trim();
  const normalized = text.toLowerCase();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /menu –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  if (normalized === '/menu') {
    const session = sessions[userId];
    if (!session || session.step === 'awaiting_password' || !session.profile) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
    }
    const profile = session.profile;
    sessions[userId] = { step: 'main_menu', profile };
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ" –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  if (text === 'üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ') {
    const session = sessions[userId];
    if (!session || !session.profile) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–æ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
      // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      try {
        const existingProfiles = await prisma.userProfile.findMany({
          where: { telegramId: userId.toString() }
        });
        
        if (existingProfiles.length === 1) {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const profile = existingProfiles[0];
          sessions[userId] = {
            profile: profile.profileName,
            step: 'word_tasks_menu',
            xp: profile.xp,
            level: profile.level,
            loginStreak: profile.loginStreak,
            lastBonusDate: profile.lastBonusDate,
            lastSmartRepeatDate: profile.lastSmartRepeatDate,
            reminderTime: profile.reminderTime
          };
        } else if (existingProfiles.length > 1) {
          // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π - –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
          sessions[userId] = { step: 'awaiting_profile' };
          return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:', {
            reply_markup: {
              keyboard: [['–ê–º–∏–Ω–∞', '–ù—É—Ä–±–æ–ª–∞—Ç']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          });
        } else {
          // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
        }
      } catch (error) {
        console.error('Error loading profile for smart repeat:', error);
        return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
    }
  }

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  if (!sessions[userId]) {
    sessions[userId] = { step: 'awaiting_password' };
  }
  const session = sessions[userId];
  const step = session.step;

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥" ---
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
  if (session.step === 'quiz_game') {
    if (text === '‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã') {
      session.step = 'word_tasks_menu';
      delete session.currentQuiz;
      delete session.currentQuizSession;
      return ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', {
        reply_markup: wordTasksMenu,
      });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    return await handleQuizAnswer(ctx, session, text);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã
  if (session.step === 'quiz_continue') {
    if (text === 'üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' || text === '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å') {
      return await startQuizGame(ctx, session);
    }
    
    if (text === 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É') {
      return await finishQuizSession(ctx, session);
    }
    
    if (text === 'üéØ –ù–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞') {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
      delete session.currentQuizSession;
      return await startQuizGame(ctx, session);
    }
    
    if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
      const stats = session.quizStats;
      const successRate = stats.gamesPlayed > 0 ? Math.round((stats.correctAnswers / stats.gamesPlayed) * 100) : 0;
      
      const statsMessage = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥"</b>\n\n` +
        `üéÆ <b>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:</b> ${stats.gamesPlayed}\n` +
        `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> ${stats.correctAnswers}\n` +
        `‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> ${stats.gamesPlayed - stats.correctAnswers}\n` +
        `üìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> ${successRate}%\n\n` +
        `üî• <b>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</b> ${stats.currentStreak}\n` +
        `üèÜ <b>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</b> ${stats.bestStreak}\n\n` +
        `‚≠ê <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> ${stats.totalPoints}`;
      
      const continueKeyboard = new Keyboard();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
      if (session.currentQuizSession && session.currentQuizSession.currentQuestionIndex < session.currentQuizSession.words.length) {
        if (session.currentQuizSession.currentQuestionIndex + 1 < session.currentQuizSession.words.length) {
          continueKeyboard.text('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
        } else {
          continueKeyboard.text('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É');
        }
      } else {
        continueKeyboard.text('üéØ –ù–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞');
      }
      
      continueKeyboard.row()
        .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º')
        .row();
      
      return ctx.reply(statsMessage, {
        reply_markup: continueKeyboard,
        parse_mode: 'HTML'
      });
    }
    
    if (text === 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º') {
      session.step = 'word_tasks_menu';
      delete session.currentQuiz;
      delete session.currentQuizSession;
      return ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', {
        reply_markup: wordTasksMenu,
      });
    }
    
    // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    const continueKeyboard = new Keyboard()
      .text('üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å')
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
      .row()
      .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º')
      .row();
    
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: continueKeyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  if (session.step === 'set_reminder_time') {
    await handleReminderTimeInput(ctx, text, session);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è /clear (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ!)
  if (session.awaitingClearConfirmation) {
    if (normalized === '–¥–∞') {
      try {
        const deletedWords = await prisma.word.deleteMany({
          where: { profile: session.profile }
        });
        
        session.awaitingClearConfirmation = false;
        session.step = 'main_menu';
        
        await ctx.reply(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedWords.count} —Å–ª–æ–≤`, {
          reply_markup: mainMenu
        });
      } catch (error) {
        console.error('Error clearing words:', error);
        session.awaitingClearConfirmation = false;
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤');
      }
    } else {
      session.awaitingClearConfirmation = false;
      session.step = 'main_menu';
      await ctx.reply('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', { reply_markup: mainMenu });
    }
    return;
  }

  console.log(`DEBUG: ${userId} | STEP: ${step} | TEXT: "${text}"`);

  // –®–∞–≥ 1: –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
  if (step === 'awaiting_password') {
    const allowed = ['123', 'Aminur777'];
    if (allowed.includes(text)) {
      session.step = 'awaiting_profile';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:', {
        reply_markup: {
          keyboard: [['–ê–º–∏–Ω–∞', '–ù—É—Ä–±–æ–ª–∞—Ç']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else {
      return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
    }
  }

  // –®–∞–≥ 2: –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
  if (step === 'awaiting_profile') {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProfile = await getOrCreateUserProfile(userId, text);
    
    session.profile = text;
    session.step = 'main_menu';
    session.xp = userProfile.xp;
    session.level = userProfile.level;
    session.loginStreak = userProfile.loginStreak;
    session.lastBonusDate = userProfile.lastBonusDate;
    session.lastSmartRepeatDate = userProfile.lastSmartRepeatDate;
    session.reminderTime = userProfile.reminderTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await checkDailyBonus(session, ctx);
    const menuMessage = getMainMenuMessage(session);
    
    return ctx.reply(`–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${session.profile}\n\n${menuMessage}`, {
      reply_markup: mainMenu,
      parse_mode: 'HTML'
    });
  }
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –¥–æ–±–∞–≤–∏—Ç—å / –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
  if (step === 'main_menu') {
    if (text === 'üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞') {
      session.step = 'add_words_main_menu';
      return ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:', {
        reply_markup: addWordsMainMenu,
      });
    }
    if (text === 'üéØ –ó–∞–¥–∞–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º') {
      session.step = 'word_tasks_menu';
      return ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', {
        reply_markup: wordTasksMenu,
      });
    }
    if (text === 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å') {
      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É achievements
      const userId = ctx.from.id;
      const session = sessions[userId];
      if (!session || !session.profile) {
        return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await checkDailyBonus(session, ctx);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const words = await getWords(session.profile);
      const total = words.length;
      const mastered = words.filter(w => (w.correct || 0) >= 5).length;
      
      // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–Ω–∏–≤—Ü–∞ –¥–Ω—è ---
      await checkUserInactivity(session, words, ctx);
      
      // --- XP –∏ —É—Ä–æ–≤–µ–Ω—å ---
      const currentXP = session.xp || 0;
      const currentLevel = getLevelByXP(currentXP);
      const nextLevel = XP_LEVELS.find(l => l.level === currentLevel.level + 1);
      const xpToNext = nextLevel ? nextLevel.required_xp - currentXP : 0;
      const loginStreak = session.loginStreak || 0;
      
      // --- Streak ---
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ updatedAt, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ createdAt)
      const dates = words
        .map(w => w.updatedAt || w.createdAt)
        .filter(Boolean)
        .map(d => new Date(d).toDateString());
      const uniqueDays = Array.from(new Set(dates)).sort();
      let studyStreak = session.streak || 0;
      if (!session.slothOfTheDay) {
        if (uniqueDays.length > 0) {
          const today = new Date().toDateString();
          const isStudiedToday = uniqueDays.includes(today);
          if (isStudiedToday) {
            studyStreak = 1;
            session.streak = 1;
          }
        }
      } else {
        studyStreak = 0;
        session.streak = 0;
      }
      
      // --- –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä XP ---
      const xpMultiplier = getStreakMultiplier(studyStreak);
      
      // --- –ê—á–∏–≤–∫–∏ ---
      const achievements = [];
      // –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
      if (total >= 1) achievements.push('üéØ –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî –Ω–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ!');
      if (total >= 5) achievements.push('üìö –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä ‚Äî 5 —Å–ª–æ–≤ –≤ –∫–æ–ø–∏–ª–∫–µ');
      if (total >= 10) achievements.push('üåü –î–µ—Å—è—Ç–∫–∞ ‚Äî 10 —Å–ª–æ–≤ –æ—Å–≤–æ–µ–Ω–æ');
      if (total >= 25) achievements.push('üî• –ß–µ—Ç–≤–µ—Ä—Ç—å —Å–æ—Ç–Ω–∏ ‚Äî 25 —Å–ª–æ–≤');
      if (total >= 50) achievements.push('üí™ –ü–æ–ª—Å–æ—Ç–Ω–∏ ‚Äî 50 —Å–ª–æ–≤');
      if (total >= 100) achievements.push('üíØ –°–æ—Ç–Ω—è ‚Äî 100 —Å–ª–æ–≤ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ');
      if (total >= 200) achievements.push('üöÄ –î–≤–µ—Å—Ç–∏ ‚Äî —Å–µ—Ä—å—ë–∑–Ω—ã–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å');
      if (total >= 500) achievements.push('üëë –°–ª–æ–≤–∞—Ä–Ω—ã–π –∫–æ—Ä–æ–ª—å ‚Äî 500 —Å–ª–æ–≤');
      
      // –ü–æ –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞–º
      if (mastered >= 10) achievements.push('üü¢ –ú–∞—Å—Ç–µ—Ä 10 ‚Äî 10 –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤');
      if (mastered >= 50) achievements.push('üü¢ –°–ª–æ–≤–æ-–º–∞–≥ ‚Äî 50 –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤');
      if (mastered >= 100) achievements.push('üü¢ –°—É–ø–µ—Ä—Å—Ç–∞—Ä ‚Äî 100 –æ—Ç–ª–∏—á–Ω–æ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤');
      
      // –ü–æ streak –∏–∑—É—á–µ–Ω–∏—è
      if (studyStreak >= 2) achievements.push('üî• –†–∞–∑–æ–≥—Ä–µ–≤ ‚Äî 2 –¥–Ω—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
      if (studyStreak >= 3) achievements.push('üî• –ù–µ —Å–¥–∞—é—Å—å ‚Äî 3 –¥–Ω—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
      if (studyStreak >= 7) achievements.push('üî• –ù–µ–¥–µ–ª—è —Å–∏–ª—ã ‚Äî 7 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
      if (studyStreak >= 14) achievements.push('üî• –î–≤–µ –Ω–µ–¥–µ–ª–∏ ‚Äî 14 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
      if (studyStreak >= 30) achievements.push('üî• –ú–µ—Å—è—Ü —Å–∏–ª—ã ‚Äî 30 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
      if (studyStreak >= 50) achievements.push('üî• –ù–µ—Å–≥–∏–±–∞–µ–º—ã–π ‚Äî 50 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥');
      if (studyStreak >= 100) achievements.push('üî• –ú–∞—Å—Ç–µ—Ä –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Äî 100 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥');
      
      // –ü–æ —É—Ä–æ–≤–Ω—è–º
      if (currentLevel.level >= 2) achievements.push(`${currentLevel.emoji} ${currentLevel.title} ‚Äî —É—Ä–æ–≤–µ–Ω—å ${currentLevel.level}`);
      if (currentLevel.level >= 5) achievements.push('üéØ –°–µ—Ä—å—ë–∑–Ω—ã–π –∏–≥—Ä–æ–∫ ‚Äî —É—Ä–æ–≤–µ–Ω—å 5+');
      if (currentLevel.level >= 8) achievements.push('üåü –≠–ª–∏—Ç–∞ ‚Äî —É—Ä–æ–≤–µ–Ω—å 8+');
      if (currentLevel.level >= 10) achievements.push('üöÄ –õ–µ–≥–µ–Ω–¥–∞ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!');
      
      // –ü–æ login streak
      if (loginStreak >= 7) achievements.push('üìÖ –ù–µ–¥–µ–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ ‚Äî 7 –¥–Ω–µ–π –≤—Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥');
      if (loginStreak >= 30) achievements.push('üìÖ –ú–µ—Å—è—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã ‚Äî 30 –¥–Ω–µ–π –≤—Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥');
      if (loginStreak >= 100) achievements.push('üìÖ –ú–∞—à–∏–Ω–∞ –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äî 100 –¥–Ω–µ–π –≤—Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥');
      
      let msg = `üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n`;
      
      // --- –£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
      msg += `${currentLevel.emoji} <b>–£—Ä–æ–≤–µ–Ω—å ${currentLevel.level}: ${currentLevel.title}</b>\n`;
      msg += `‚≠ê XP: ${currentXP}\n`;
      if (nextLevel) {
        const progress = Math.round(((currentXP - currentLevel.required_xp) / (nextLevel.required_xp - currentLevel.required_xp)) * 100);
        msg += `üéØ –î–æ —É—Ä–æ–≤–Ω—è ${nextLevel.level}: ${xpToNext} XP (${progress}%)\n`;
      } else {
        msg += `üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
      }
      msg += `\n`;
      
      // --- Streaks –∏ –±–æ–Ω—É—Å—ã ---
      msg += `üî• <b>Streak –∏–∑—É—á–µ–Ω–∏—è:</b> ${studyStreak} –¥–Ω–µ–π\n`;
      msg += `üìÖ <b>Streak –≤—Ö–æ–¥–∞:</b> ${loginStreak} –¥–Ω–µ–π\n`;
      msg += `‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å XP:</b> x${xpMultiplier.toFixed(1)}\n\n`;
      
      // --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
      msg += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
      msg += `–í—Å–µ–≥–æ —Å–ª–æ–≤: ${total}\n`;
      msg += `–û—Ç–ª–∏—á–Ω–æ –∏–∑—É—á–µ–Ω–æ: ${mastered}\n\n`;
      
      // --- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
      msg += `üèÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n`;
      if (achievements.length) {
        msg += achievements.map(a => `‚Ä¢ ${a}`).join('\n');
      } else {
        msg += '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ!';
      }
      
      return ctx.reply(msg, { parse_mode: 'HTML' });
    }
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑ –º–µ–Ω—é ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:', {
      reply_markup: mainMenu,
    });
  }

  // –ü–æ–¥–º–µ–Ω—é: –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞
  if (step === 'add_words_main_menu') {
    if (text === '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–ª–æ–≤–æ') {
      session.step = 'awaiting_english';
      return ctx.reply('–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:');
    }
    if (text === 'üìö –°–ª–æ–≤–∞ –∏–∑ Oxford 3000') {
      session.step = 'select_words_count_oxford';
      return ctx.reply('–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å?', {
        reply_markup: wordsCountMenu,
      });
    }
    if (text === 'üéì –°–ª–æ–≤–∞ –∏–∑ IELTS') {
      session.step = 'select_words_count_ielts';
      return ctx.reply('–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å?', {
        reply_markup: wordsCountMenu,
      });
    }
    if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    return ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:', {
      reply_markup: addWordsMainMenu,
    });
  }

  // –ü–æ–¥–º–µ–Ω—é: –∑–∞–¥–∞–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
  if (step === 'word_tasks_menu') {
    console.log(`DEBUG: Received text in word_tasks_menu: "${text}"`);
    
    if (text === 'üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ') {
      // –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const userWords = await getWords(session.profile);
      if (userWords.length === 0) {
        session.step = 'main_menu';
        return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ.', {
          reply_markup: mainMenu,
        });
      }

      const now = new Date();
      const DAY_MS = 24 * 60 * 60 * 1000;
      
      // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
      function calculatePriority(word) {
        const lastUpdate = word.updatedAt || word.createdAt;
        const daysSinceUpdate = (now - lastUpdate) / DAY_MS;
        
        // –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏—è
        let intervalDays;
        if (word.correct <= 1) intervalDays = 1;      // –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        else if (word.correct === 2) intervalDays = 2; // —á–µ—Ä–µ–∑ –¥–µ–Ω—å
        else if (word.correct === 3) intervalDays = 4; // —á–µ—Ä–µ–∑ 4 –¥–Ω—è
        else if (word.correct === 4) intervalDays = 7; // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
        else if (word.correct === 5) intervalDays = 14; // —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏
        else intervalDays = 30; // –º–µ—Å—è—Ü –¥–ª—è —Ö–æ—Ä–æ—à–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö
        
        // –ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∞, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        const overdue = Math.max(0, daysSinceUpdate - intervalDays);
        return overdue + (6 - Math.min(word.correct, 5)) * 2; // –±–æ–Ω—É—Å –∑–∞ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–±—ã–≤–∞–Ω–∏–µ)
      const sortedWords = userWords
        .map(w => ({ ...w, priority: calculatePriority(w) }))
        .sort((a, b) => b.priority - a.priority);
      
      // –ë–µ—Ä–µ–º —Ç–æ–ø-20 —Å–ª–æ–≤ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      const wordsToRepeat = sortedWords.slice(0, 20);
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
      function getSafeDirection(word, allWords) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ —Å —Ç–∞–∫–∏–º –∂–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º
        const sameTranslation = allWords.filter(w => w.translation.toLowerCase() === word.translation.toLowerCase());
        if (sameTranslation.length > 1) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ en-ru
          return 'en-ru';
        }
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        return Math.random() < 0.5 ? 'en-ru' : 'ru-en';
      }
      
      session.wordsToRepeat = wordsToRepeat.map(w => {
        const direction = getSafeDirection(w, userWords);
        return { ...w, direction };
      });
      session.currentIndex = 0;
      session.step = 'waiting_answer';
      session.repeatMode = 'smart';
      
      const first = session.wordsToRepeat[0];
      const question = first.direction === 'en-ru'
        ? `–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: "${first.word}"?`
        : `–ö–∞–∫ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏: "${first.translation}"?`;
      
      return ctx.reply(`üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!\n–í—ã–±—Ä–∞–Ω—ã —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ.\n\n${question}`);
    }
    
    if (text === 'üéØ –£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥' || text === '–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥' || text === 'ÔøΩ –£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥') {
      console.log('üéØ Quiz button clicked by user:', ctx.from.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userWords = await getWords(session.profile);
      console.log('üìö User has', userWords.length, 'words');
      
      if (userWords.length < 4) {
        console.log('‚ùå Not enough words for quiz');
        session.step = 'word_tasks_menu';
        return ctx.reply('‚ùå –î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 —Å–ª–æ–≤–∞ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤!', {
          reply_markup: wordTasksMenu,
        });
      }
      
      console.log('‚úÖ Starting quiz game...');
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
      return await startQuizGame(ctx, session);
    }
    
    if (text === 'üé≠ –°–∏—Ç—É–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è' || text === 'ÔøΩüé≠ –°–∏—Ç—É–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è') {
      session.step = 'situational_menu';
      return ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–∏—Ç—É–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', {
        reply_markup: situationalMenu,
      });
    }
    if (text === 'üì∫ –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏') {
      session.step = 'examples_menu';
      return ctx.reply('üì∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–º–µ—Ä–æ–≤:', {
        reply_markup: examplesMenu,
      });
    }
    if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    return ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', {
      reply_markup: wordTasksMenu,
    });
  }

  // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è Oxford 3000
  if (step === 'select_words_count_oxford') {
    const countMap = { '7 —Å–ª–æ–≤': 7, '10 —Å–ª–æ–≤': 10, '15 —Å–ª–æ–≤': 15, '20 —Å–ª–æ–≤': 20 };
    if (countMap[text]) {
      session.selectedWordsCount = countMap[text];
      session.step = 'awaiting_oxford_section';
      return ctx.reply('–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è –≤—ã—É—á–∏—Ç—å:', {
        reply_markup: getOxfordSectionsMenu(),
      });
    }
    if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'add_words_main_menu';
      return ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:', { reply_markup: addWordsMainMenu });
    }
    return ctx.reply('–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å?', {
      reply_markup: wordsCountMenu,
    });
  }

  // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è IELTS
  if (step === 'select_words_count_ielts') {
    const countMap = { '7 —Å–ª–æ–≤': 7, '10 —Å–ª–æ–≤': 10, '15 —Å–ª–æ–≤': 15, '20 —Å–ª–æ–≤': 20 };
    if (countMap[text]) {
      session.selectedWordsCount = countMap[text];
      
      // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º IELTS-—Å–ª–æ–≤–∞
      const userWords = await getWords(session.profile);
      const known = new Set(userWords.map(w => w.word.toLowerCase()));
      const newWords = ieltsWords.filter(w => !known.has(getFirstTwoWords(w.word).toLowerCase()));
      if (newWords.length === 0) {
        session.step = 'main_menu';
        return ctx.reply('–í—Å–µ IELTS-—Å–ª–æ–≤–∞ —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', { reply_markup: mainMenu });
      }
      
      const pick = (arr, n) => arr.sort(() => 0.5 - Math.random()).slice(0, n);
      const toAdd = pick(newWords, session.selectedWordsCount).map(w => ({ ...w, word: getFirstTwoWords(w.word) }));
      
      const prompt = `–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤: [${toAdd.map(w => w.word).join(', ')}] —É–∫–∞–∂–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–µ –±–æ–ª–µ–µ 10 —Å–ª–æ–≤), –ø—Ä–∏–º–µ—Ä –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ JSON –≤–∏–¥–∞ [{\"word\": \"example\", \"translation\": \"–ø—Ä–∏–º–µ—Ä\", \"explanation\": \"–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ\", \"example\": \"This is an example.\", \"example_translation\": \"–≠—Ç–æ –ø—Ä–∏–º–µ—Ä.\"}, ...]. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤.`;
      await ctx.reply('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã —É AI, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
      
      try {
        const gptRes = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
          max_tokens: 2000
        }, {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          }
        });
        
        let words = [];
        const match = gptRes.data.choices[0].message.content.match(/\[.*\]/s);
        if (match) {
          words = JSON.parse(match[0]);
        } else {
          throw new Error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤.');
        }
        
        await Promise.all(words.map(w => addWord(session.profile, getFirstTwoWords(w.word), w.translation, 'IELTS')));
        session.step = 'main_menu';
        
        let msgParts = [];
        for (let i = 0; i < words.length; i += 5) {
          const chunk = words.slice(i, i + 5);
          let msg = '–î–æ–±–∞–≤–ª–µ–Ω—ã IELTS-—Å–ª–æ–≤–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏:\n';
          msg += chunk.map(w => `\n<b>${w.word}</b> ‚Äî ${w.translation}\n${w.explanation}\n–ü—Ä–∏–º–µ—Ä: ${w.example}\n–ü–µ—Ä–µ–≤–æ–¥: ${w.example_translation}`).join('\n');
          msgParts.push(msg);
        }
        for (const part of msgParts) {
          await ctx.reply(part, { reply_markup: mainMenu, parse_mode: 'HTML' });
        }
      } catch (e) {
        session.step = 'main_menu';
        let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        if (e.response && e.response.data && e.response.data.error && e.response.data.error.message) {
          errorMsg += `\n\nAI –æ—Ç–≤–µ—Ç–∏–ª: ${e.response.data.error.message}`;
        } else if (e.message) {
          errorMsg += `\n\n${e.message}`;
        }
        console.error('IELTS AI error:', e);
        return ctx.reply(errorMsg, { reply_markup: mainMenu });
      }
      return;
    }
    if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'add_words_main_menu';
      return ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:', { reply_markup: addWordsMainMenu });
    }
    return ctx.reply('–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å?', {
      reply_markup: wordsCountMenu,
    });
  }

  // –ú–µ–Ω—é —Å–∏—Ç—É–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  if (step === 'situational_menu') {
    const locations = [
      '‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç', 'üèõÔ∏è –ú—É–∑–µ–π', 'üè• –ë–æ–ª—å–Ω–∏—Ü–∞', 'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω', 'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω', 
      'üè® –û—Ç–µ–ª—å', 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', '‚öΩ –°—Ç–∞–¥–∏–æ–Ω', 'üè¢ –û—Ñ–∏—Å', 
      'üè¶ –ë–∞–Ω–∫', 'üõ£Ô∏è –£–ª–∏—Ü–∞', 'üé≠ –¢–µ–∞—Ç—Ä', 'üöó –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', 'üè´ –®–∫–æ–ª–∞'
    ];
    
    if (locations.includes(text)) {
      session.step = 'generating_situation';
      session.selectedLocation = text;
      
      await ctx.reply('ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é...');
      
      try {
        const situation = await generateSituation(text);
        session.currentSituation = situation;
        session.step = 'awaiting_situation_response';
        
        await ctx.reply(`${text}\n\n${situation}`, {
          reply_markup: new Keyboard().text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').row()
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏:', error);
        session.step = 'situational_menu';
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
          reply_markup: situationalMenu
        });
      }
      return;
    }
    
    if (text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    
    return ctx.reply('üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–∏—Ç—É–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', {
      reply_markup: situationalMenu,
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é
  if (step === 'awaiting_situation_response') {
    if (text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    
    session.step = 'checking_grammar';
    await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –≥—Ä–∞–º–º–∞—Ç–∏–∫—É...');
    
    try {
      const feedback = await checkGrammar(text);
      session.step = 'situational_menu';
      
      await ctx.reply(`üìù <b>–§–∏–¥–±–µ–∫ –ø–æ –≤–∞—à–µ–º—É –æ—Ç–≤–µ—Ç—É:</b>\n\n${feedback}`, {
        reply_markup: situationalMenu,
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:', error);
      session.step = 'situational_menu';
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: situationalMenu
      });
    }
    return;
  }

  // –ú–µ–Ω—é –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –∂–∏–∑–Ω–∏
  if (step === 'examples_menu') {
    if (text === 'üì∞ –ü—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π') {
      session.step = 'awaiting_word_for_news';
      return ctx.reply('üì∞ –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', {
        reply_markup: new Keyboard().text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').row()
      });
    }
    if (text === 'üé¨ –ü—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ —Ñ–∏–ª—å–º–æ–≤') {
      session.step = 'awaiting_word_for_movies';
      return ctx.reply('üé¨ –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤:', {
        reply_markup: new Keyboard().text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').row()
      });
    }
    if (text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    return ctx.reply('üì∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–º–µ—Ä–æ–≤:', {
      reply_markup: examplesMenu,
    });
  }

  // –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
  if (step === 'awaiting_word_for_news') {
    if (text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    
    const word = text.trim().toLowerCase();
    await ctx.reply('üîç –°–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π...');
    
    try {
      const examples = await searchNewsExamples(word);
      await ctx.reply(`üì∞ **–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤–∞ "${word}" –≤ —Å—Ç–∏–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π:**\n\n${examples}`, {
        reply_markup: new Keyboard()
          .text('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ')
          .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
          .row(),
        parse_mode: 'Markdown'
      });
      
      session.step = 'examples_news_results';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: new Keyboard().text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').row()
      });
    }
    return;
  }

  // –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤
  if (step === 'awaiting_word_for_movies') {
    if (text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    
    const word = text.trim().toLowerCase();
    await ctx.reply('üé¨ –°–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä—ã –≤ —Å—Ç–∏–ª–µ –¥–∏–∞–ª–æ–≥–æ–≤...');
    
    try {
      const examples = await searchMovieExamples(word);
      await ctx.reply(`üé¨ **–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤–∞ "${word}" –≤ —Å—Ç–∏–ª–µ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤:**\n\n${examples}`, {
        reply_markup: new Keyboard()
          .text('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ')
          .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
          .row(),
        parse_mode: 'Markdown'
      });
      
      session.step = 'examples_movies_results';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∏–ª—å–º–æ–≤:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: new Keyboard().text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').row()
      });
    }
    return;
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
  if (step === 'examples_news_results') {
    if (text === '–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ') {
      session.step = 'awaiting_word_for_news';
      return ctx.reply('üì∞ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö:', {
        reply_markup: new Keyboard().text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').row()
      });
    }
    if (text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: new Keyboard()
        .text('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ')
        .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        .row()
    });
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
  if (step === 'examples_movies_results') {
    if (text === '–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ') {
      session.step = 'awaiting_word_for_movies';
      return ctx.reply('üé¨ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–∏–ª—å–º–∞—Ö/—Å–µ—Ä–∏–∞–ª–∞—Ö:', {
        reply_markup: new Keyboard().text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é').row()
      });
    }
    if (text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: mainMenu });
    }
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: new Keyboard()
        .text('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ')
        .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        .row()
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤
  if (step === 'waiting_answer') {
    const wordObj = session.wordsToRepeat[session.currentIndex];
    let correct, answer;
    if (wordObj.direction === 'en-ru') {
      correct = wordObj.translation.toLowerCase();
      answer = normalized;
    } else {
      correct = wordObj.word.toLowerCase();
      answer = normalized;
    }
    const all = await getWords(session.profile);
    const idx = all.findIndex(w =>
      w.word === wordObj.word && w.translation === wordObj.translation
    );

    // --- –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ---
    if (!session.mistakes) session.mistakes = [];
    if (!session.mistakeCounts) session.mistakeCounts = {};

    if (answer === correct) {
      await ctx.reply('‚úÖ –í–µ—Ä–Ω–æ!');
      
      // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      const wordCorrectLevel = (all[idx]?.correct || 0);
      const xpGained = await awardXP(session, wordCorrectLevel, ctx);
      
      if (idx !== -1) await updateWordCorrect(session.profile, wordObj.word, wordObj.translation, (all[idx].correct || 0) + 1);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π XP
      await ctx.reply(`üí´ +${xpGained} XP`);
    } else {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correct}`);
      if (idx !== -1) {
        // –í —É–º–Ω–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –º—è–≥–∫–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ 0
        if (session.repeatMode === 'smart') {
          const newCorrect = Math.max(0, (all[idx].correct || 0) - 1);
          await updateWordCorrect(session.profile, wordObj.word, wordObj.translation, newCorrect);
        } else {
          await updateWordCorrect(session.profile, wordObj.word, wordObj.translation, 0);
        }
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏
      const key = wordObj.word + '|' + wordObj.translation;
      if (!session.mistakes.find(w => w.word === wordObj.word && w.translation === wordObj.translation)) {
        session.mistakes.push({ ...wordObj, direction: wordObj.direction });
        session.mistakeCounts[key] = 0;
      }
    }

    session.currentIndex++;
    if (session.currentIndex < session.wordsToRepeat.length) {
      const next = session.wordsToRepeat[session.currentIndex];
      const question = next.direction === 'en-ru'
        ? `–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: "${next.word}"?`
        : `–ö–∞–∫ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏: "${next.translation}"?`;
      return ctx.reply(question);
    } else if (session.mistakes.length > 0) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
      session.step = 'work_on_mistakes';
      session.mistakeIndex = 0;
      session.mistakeTries = 0;
      const firstMistake = session.mistakes[0];
      const question = firstMistake.direction === 'en-ru'
        ? `–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: "${firstMistake.word}"?`
        : `–ö–∞–∫ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏: "${firstMistake.translation}"?`;
      await ctx.reply('–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏! –°–µ–π—á–∞—Å –ø–æ–≤—Ç–æ—Ä–∏–º —Å–ª–æ–≤–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –æ—à–∏–±–∫–∏. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –≤ –±–∞–∑–µ.');
      return ctx.reply(question);
    } else {
      // --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏–ª–∏ IELTS, —Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ sentence_task ---
      if (session.repeatMode === 'oxford_section' || session.repeatMode === 'ielts') {
        session.step = 'main_menu';
        return ctx.reply('üìò –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', {
          reply_markup: mainMenu,
        });
      }
      // --- –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ sentence_task ---
      if (session.repeatMode === 'smart') {
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
        session.lastSmartRepeatDate = new Date().toDateString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (session.profile) {
          await saveUserSession(ctx.from.id, session.profile, session);
        }
        
        const allUserWords = await getWords(session.profile);
        const newWords = allUserWords.filter(w => w.correct <= 2).slice(0, 7);
        if (newWords.length > 0) {
          session.sentenceTaskWords = newWords;
          session.sentenceTaskIndex = 0;
          session.step = 'sentence_task';
          await ctx.reply(`üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (${newWords.length}): –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –Ω–∞ —Å–ª–æ–≤–æ. –ü–∏—à–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.`);
          await ctx.reply(`–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ: "${newWords[0].word}". –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:`);
          return;
        } else {
          session.step = 'main_menu';
          return ctx.reply('üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω—ã.', {
            reply_markup: mainMenu,
          });
        }
      }
    }
  }

  // --- –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ---
  if (step === 'work_on_mistakes') {
    const mistakes = session.mistakes;
    let idx = session.mistakeIndex || 0;
    let tries = session.mistakeTries || 0;
    if (idx >= mistakes.length) {
      // --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏–ª–∏ IELTS, —Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ sentence_task ---
      if (session.repeatMode === 'oxford_section' || session.repeatMode === 'ielts') {
        session.step = 'main_menu';
        delete session.mistakes;
        delete session.mistakeCounts;
        delete session.mistakeIndex;
        delete session.mistakeTries;
        return ctx.reply('–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.', { reply_markup: mainMenu });
      }
      // –ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ‚Äî sentence_task, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
      const allUserWords = await getWords(session.profile);
      const newWords = allUserWords.filter(w => w.correct <= 2).slice(0, 7);
      if (newWords.length > 0) {
        session.sentenceTaskWords = newWords;
        session.sentenceTaskIndex = 0;
        session.step = 'sentence_task';
        await ctx.reply(`–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (${newWords.length}): –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –Ω–∞ —Å–ª–æ–≤–æ. –ü–∏—à–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.`);
        await ctx.reply(`–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ: "${newWords[0].word}". –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:`);
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è
        delete session.mistakes;
        delete session.mistakeCounts;
        delete session.mistakeIndex;
        delete session.mistakeTries;
        return;
      } else {
        session.step = 'main_menu';
        delete session.mistakes;
        delete session.mistakeCounts;
        delete session.mistakeIndex;
        delete session.mistakeTries;
        return ctx.reply('–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.', { reply_markup: mainMenu });
      }
    }
    const wordObj = mistakes[idx];
    let correct, answer;
    if (wordObj.direction === 'en-ru') {
      correct = wordObj.translation.toLowerCase();
      answer = normalized;
    } else {
      correct = wordObj.word.toLowerCase();
      answer = normalized;
    }
    const key = wordObj.word + '|' + wordObj.translation;
    if (answer === correct) {
      await ctx.reply('‚úÖ –í–µ—Ä–Ω–æ!');
      // –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
      session.mistakeIndex = idx + 1;
      session.mistakeTries = 0;
    } else {
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
      session.mistakeTries = tries + 1;
      if (session.mistakeTries >= 3) {
        await ctx.reply('3 –æ—à–∏–±–∫–∏ –ø–æ–¥—Ä—è–¥. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É.');
        session.mistakeIndex = idx + 1;
        session.mistakeTries = 0;
      } else {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!');
      }
    }
    // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if (session.mistakeIndex < mistakes.length) {
      const next = mistakes[session.mistakeIndex];
      const question = next.direction === 'en-ru'
        ? `–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: "${next.word}"?`
        : `–ö–∞–∫ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏: "${next.translation}"?`;
      return ctx.reply(question);
    } else if (session.mistakeIndex >= mistakes.length) {
      // --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–¥–µ–ª—É –∏–ª–∏ IELTS, —Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ sentence_task ---
      if (session.repeatMode === 'oxford_section' || session.repeatMode === 'ielts') {
        session.step = 'main_menu';
        delete session.mistakes;
        delete session.mistakeCounts;
        delete session.mistakeIndex;
        delete session.mistakeTries;
        return ctx.reply('–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.', { reply_markup: mainMenu });
      }
      // –ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ‚Äî sentence_task, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
      const allUserWords = await getWords(session.profile);
      const newWords = allUserWords.filter(w => w.correct <= 2).slice(0, 7);
      if (newWords.length > 0) {
        session.sentenceTaskWords = newWords;
        session.sentenceTaskIndex = 0;
        session.step = 'sentence_task';
        await ctx.reply(`–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (${newWords.length}): –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –Ω–∞ —Å–ª–æ–≤–æ. –ü–∏—à–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.`);
        await ctx.reply(`–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ: "${newWords[0].word}". –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:`);
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è
        delete session.mistakes;
        delete session.mistakeCounts;
        delete session.mistakeIndex;
        delete session.mistakeTries;
        return;
      } else {
        session.step = 'main_menu';
        delete session.mistakes;
        delete session.mistakeCounts;
        delete session.mistakeIndex;
        delete session.mistakeTries;
        return ctx.reply('–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.', { reply_markup: mainMenu });
      }
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
  if (step === 'awaiting_english') {
    session.newWord = text;
    session.step = 'awaiting_translation';
    return ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
  }
  if (step === 'awaiting_translation') {
    const word = session.newWord;
    const translation = text;
    await addWord(session.profile, word, translation, null);
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
    const continueAddingMenu = new Keyboard()
      .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–ª–æ–≤–æ')
      .row()
      .text('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
      .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
      .row();
    
    session.step = 'word_added_menu';
    return ctx.reply('‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', {
      reply_markup: continueAddingMenu,
    });
  }

  // –ú–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
  if (step === 'word_added_menu') {
    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–ª–æ–≤–æ') {
      session.step = 'awaiting_english';
      return ctx.reply('–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:');
    }
    if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è') {
      session.step = 'add_words_main_menu';
      return ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:', {
        reply_markup: addWordsMainMenu,
      });
    }
    if (text === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      session.step = 'main_menu';
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: mainMenu,
      });
    }
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
    const continueAddingMenu = new Keyboard()
      .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–ª–æ–≤–æ')
      .row()
      .text('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
      .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
      .row();
    return ctx.reply('‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: continueAddingMenu,
    });
  }
  // –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –∏–∑ 3000
  if (step === 'awaiting_oxford_section') {
    const section = text.trim();
    const sectionWords = oxford3000.filter(w => w.section === section);
    if (!sectionWords.length) {
      // step –Ω–µ –º–µ–Ω—è–µ–º, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ 'awaiting_oxford_section'
      return ctx.reply('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç —Å–ª–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª.', { reply_markup: getOxfordSectionsMenu() });
    }
    // –£–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ word)
    const userWords = await getWords(session.profile);
    const known = new Set(userWords.map(w => w.word.toLowerCase()));
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
    const newWords = sectionWords.filter(w => !known.has(w.word.toLowerCase()));
    if (newWords.length === 0) {
      // step –Ω–µ –º–µ–Ω—è–µ–º, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ 'awaiting_oxford_section'
      return ctx.reply('–í—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', { reply_markup: getOxfordSectionsMenu() });
    }
    // –ë–µ—Ä—ë–º –¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
    const pick = (arr, n) => arr.sort(() => 0.5 - Math.random()).slice(0, n);
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
    function getMainForm(word) {
      return word.split(/[ (]/)[0].trim();
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è ChatGPT –∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const wordsCount = session.selectedWordsCount || 20;
    const toAdd = pick(newWords, wordsCount).map(w => ({ ...w, word: getMainForm(w.word) }));
    // –ó–∞–ø—Ä–æ—Å –∫ ChatGPT –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
    const prompt = `–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤: [${toAdd.map(w => w.word).join(', ')}] —É–∫–∞–∂–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–µ –±–æ–ª–µ–µ 10 —Å–ª–æ–≤), –ø—Ä–∏–º–µ—Ä –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ JSON –≤–∏–¥–∞ [{"word": "example", "translation": "–ø—Ä–∏–º–µ—Ä", "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ", "example": "This is an example.", "example_translation": "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä."}, ...]. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤.`;
    await ctx.reply('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã —É AI, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
    try {
      console.log('DEBUG: prompt to ChatGPT:', prompt);
      console.log('DEBUG: OPENAI_API_KEY in axios:', process.env.OPENAI_API_KEY);
      const gptRes = await axios.post('https://api.openai.com/v1/chat/completions', {
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
        max_tokens: 2000
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('DEBUG: gptRes.data:', gptRes.data);
      let words = [];
      const match = gptRes.data.choices[0].message.content.match(/\[.*\]/s);
      if (match) {
        words = JSON.parse(match[0]);
      } else {
        throw new Error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤.');
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ word, translation, correct, section
      await Promise.all(words.map(w => addWord(session.profile, getMainForm(w.word), w.translation, section)));
      session.step = 'main_menu';
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ 5 —Å–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–º
      let msgParts = [];
      for (let i = 0; i < words.length; i += 5) {
        const chunk = words.slice(i, i + 5);
        let msg = '–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏:\n';
        msg += chunk.map(w => `\n<b>${w.word}</b> ‚Äî ${w.translation}\n${w.explanation}\n–ü—Ä–∏–º–µ—Ä: ${w.example}\n–ü–µ—Ä–µ–≤–æ–¥: ${w.example_translation}`).join('\n');
        msgParts.push(msg);
      }
      for (const part of msgParts) {
        await ctx.reply(part, { reply_markup: mainMenu, parse_mode: 'HTML' });
      }
    } catch (e) {
      session.step = 'main_menu';
      let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      if (e.response && e.response.data && e.response.data.error && e.response.data.error.message) {
        errorMsg += `\n\nAI –æ—Ç–≤–µ—Ç–∏–ª: ${e.response.data.error.message}`;
      } else if (e.message) {
        errorMsg += `\n\n${e.message}`;
      }
      return ctx.reply(errorMsg, { reply_markup: mainMenu });
    }
  }

  // –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ oxford3000
  if (step === 'repeat_oxford_section') {
    const section = text.trim();
    const userWords = await getWords(session.profile);
    const sectionWords = userWords.filter(w => w.section === section);
    if (!sectionWords.length) {
      session.step = 'repeat_menu';
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.', {
        reply_markup: getOxfordSectionsMenu(),
      });
    }
    const newWords = sectionWords.filter(w => w.correct <= 2);
    const learning = sectionWords.filter(w => w.correct >= 3 && w.correct <= 4);
    const mastered = sectionWords.filter(w => w.correct >= 5);
    const pick = (arr, n) => arr.sort(() => 0.5 - Math.random()).slice(0, n);
    const wordsToRepeat = [
      ...pick(newWords, 10),
      ...pick(learning, 7),
      ...pick(mastered, 3),
    ].filter(Boolean);
    if (wordsToRepeat.length === 0) {
      session.step = 'repeat_menu';
      return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ.', {
        reply_markup: getOxfordSectionsMenu(),
      });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    function getSafeDirection(word, allWords) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ —Å —Ç–∞–∫–∏–º –∂–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º
      const sameTranslation = allWords.filter(w => w.translation.toLowerCase() === word.translation.toLowerCase());
      if (sameTranslation.length > 1) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ en-ru
        return 'en-ru';
      }
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      return Math.random() < 0.5 ? 'en-ru' : 'ru-en';
    }
    
    session.wordsToRepeat = wordsToRepeat.map(w => {
      const direction = getSafeDirection(w, userWords);
      return { ...w, direction };
    });
    session.currentIndex = 0;
    session.step = 'waiting_answer';
    session.repeatMode = 'oxford_section'; // <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    const first = session.wordsToRepeat[0];
    const question = first.direction === 'en-ru'
      ? `–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: "${first.word}"?`
      : `–ö–∞–∫ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏: "${first.translation}"?`;
    return ctx.reply(question);
  }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ story task –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function generateStoryTaskContent(session, ctx) {
  const storyWords = session.storyTaskWords || [];
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
  const prompt = `–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–∞—Å—Å–∫–∞–∑–æ–≤.

–ù–∞–ø–∏—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏–∑ 10-15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –õ–Æ–ë–£–Æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É (–ù–ï –ø—Ä–æ —à–∫–æ–ª—É –∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–π).

–¢–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏:
- –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –±—É–¥—É—â–µ–µ  
- –ü—Ä–∏—Ä–æ–¥–∞ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ
- –ì–æ—Ä–æ–¥—Å–∫–∞—è –∂–∏–∑–Ω—å
- –°–ø–æ—Ä—Ç –∏ —Ö–æ–±–±–∏
- –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞
- –°–µ–º—å—è –∏ –¥—Ä—É–∑—å—è
- –ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è
- –ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∫—É–ª—å—Ç—É—Ä–∞
- –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞

–í —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞, –≤—ã–¥–µ–ª—è—è –∏—Ö –∂–∏—Ä–Ω—ã–º (–∏—Å–ø–æ–ª—å–∑—É–π –¥–≤–æ–π–Ω—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏ **): [${storyWords.join(', ')}].

–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–æ–≥–∏—á–Ω—ã–º, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è —É—Ä–æ–≤–Ω—è intermediate (B1‚ÄìB2).

–ü–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–π 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–µ–º—É, —Å–æ–±–ª—é–¥–∞—è —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ:
- 1 –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (General understanding)
- 1 –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ (Specific details)
- 1 –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (Vocabulary in context)
- 1 –≤–æ–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —É–º–æ–∑–∞–∫–ª—é—á–µ–Ω–∏–µ (Inference question)
- 1 –≤–æ–ø—Ä–æ—Å –Ω–∞ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏ (Cause and effect)

–ö –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–π —Ä–æ–≤–Ω–æ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ (1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ 4 –¥–∏—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞, –ø–æ—Ä—è–¥–æ–∫ —Å–ª—É—á–∞–π–Ω—ã–π).

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{
  "text": "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
  "questions": [
    {
      "type": "General understanding",
      "question": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞...",
      "options": ["–≤–∞—Ä–∏–∞–Ω—Ç1", ...],
      "correct_option": "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
    }, ...
  ]
}`;

  try {
    const gptRes = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.8,  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
      max_tokens: 2000
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });
    
    let answer = gptRes.data.choices[0].message.content;
    const match = answer.match(/\{[\s\S]*\}/);
    if (!match) throw new Error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª JSON.');
    
    const storyData = JSON.parse(match[0]);
    session.storyText = storyData.text;
    session.storyQuestions = storyData.questions;
    session.storyQuestionIndex = 0;
    
    // --- –£–¥–∞–ª—è–µ–º –≤—Å–µ **–∑–≤—ë–∑–¥–æ—á–∫–∏** –∏–∑ —Ç–µ–∫—Å—Ç–∞ ---
    let storyText = storyData.text.replace(/\*\*(.*?)\*\*/g, '$1');
    
    // --- –ñ–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ ---
    if (session.storyTaskWords && Array.isArray(session.storyTaskWords)) {
      for (const w of session.storyTaskWords) {
        const re = new RegExp(`\\b${w.replace(/[.*+?^${}()|[\\]\\]/g, '\\$&')}\\b`, 'gi');
        storyText = storyText.replace(re, '<b>$&</b>');
      }
    }
    
    await ctx.reply('–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è:\n' + storyText, { parse_mode: 'HTML' });
    
    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø—Ü–∏–π ---
    if (!Array.isArray(storyData.questions) || !storyData.questions.length) {
      console.error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–æ–ø—Ä–æ—Å—ã! –û—Ç–≤–µ—Ç:', answer);
      session.step = 'main_menu';
      await ctx.reply('–û—à–∏–±–∫–∞: AI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ–∫—Å—Ç—É.', { reply_markup: mainMenu });
      return;
    }
    
    const q = storyData.questions[0];
    if (!Array.isArray(q.options) || !q.options.length) {
      console.error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞! –û—Ç–≤–µ—Ç:', answer);
      session.step = 'main_menu';
      await ctx.reply('–û—à–∏–±–∫–∞: AI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.', { reply_markup: mainMenu });
      return;
    }
    
    session.step = 'story_quiz';
    await ctx.reply(`–í–æ–ø—Ä–æ—Å 1/5: ${q.question}`, {
      reply_markup: Keyboard.from(q.options.map(opt => [opt]), { one_time_keyboard: true, resize_keyboard: true })
    });
    
  } catch (e) {
    session.step = 'main_menu';
    let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    if (e.response && e.response.data && e.response.data.error && e.response.data.error.message) {
      errorMsg += `\n\nAI –æ—Ç–≤–µ—Ç–∏–ª: ${e.response.data.error.message}`;
    } else if (e.message) {
      errorMsg += `\n\n${e.message}`;
    }
    await ctx.reply(errorMsg, { reply_markup: mainMenu });
  }
}

  // --- –ó–∞–¥–∞–Ω–∏–µ: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ ---
  if (step === 'sentence_task') {
    const idx = session.sentenceTaskIndex || 0;
    const words = session.sentenceTaskWords || [];
    
    // –≠—Ç–æ—Ç –±–ª–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    const wordObj = words[idx];
    const sentence = text;
    // –ü—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
    const prompt = `–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ–≤–æ '${wordObj.word}' –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: '${sentence}'.\n\n–û—Ü–µ–Ω–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:\n- –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.\n- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.\n- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–≤—É—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{\n  "ok": true –∏–ª–∏ false,\n  "explanation": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ, –Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–¥–æ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∏ –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.\",\n  "example": \"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–¥–µ–Ω–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –§–æ—Ä–º–∞—Ç: 'Example: ... (–ü–µ—Ä–µ–≤–æ–¥: ...)'\"\n}\n\n–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–∏–º–æ JSON.`;
    await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
    try {
      const gptRes = await axios.post('https://api.openai.com/v1/chat/completions', {
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
        max_tokens: 500
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      });
      let answer = gptRes.data.choices[0].message.content;
      // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
      const match = answer.match(/\{[\s\S]*\}/);
      let result = null;
      if (match) {
        result = JSON.parse(match[0]);
      } else {
        throw new Error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª JSON.');
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º correct
      const all = await getWords(session.profile);
      const userWordIdx = all.findIndex(w => w.word === wordObj.word && w.translation === wordObj.translation);
      if (userWordIdx !== -1) {
        if (result.ok === true) {
          await updateWordCorrect(session.profile, wordObj.word, wordObj.translation, Math.max((all[userWordIdx].correct || 0) + 1, 0));
        } else {
          await updateWordCorrect(session.profile, wordObj.word, wordObj.translation, Math.max((all[userWordIdx].correct || 0) - 1, 0));
        }
      }
      // –Ø–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ JSON-–æ—Ç–≤–µ—Ç—É
      if (result.ok === true) {
        await ctx.reply('‚úÖ –•–æ—Ä–æ—à–æ! –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–≤–æ!');
      } else {
        await ctx.reply('‚ùå –£–≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–æ–≤–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –í–æ—Ç —á—Ç–æ AI –≥–æ–≤–æ—Ä–∏—Ç:');
      }
      await ctx.reply(result.explanation);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (result.example) {
        await ctx.reply(result.example);
      }
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
      await ctx.reply(`–ü–µ—Ä–µ–≤–æ–¥: ${wordObj.translation}`);
    } catch (e) {
      let errorMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      if (e.response && e.response.data && e.response.data.error && e.response.data.error.message) {
        errorMsg += `\n\nAI –æ—Ç–≤–µ—Ç–∏–ª: ${e.response.data.error.message}`;
      } else if (e.message) {
        errorMsg += `\n\n${e.message}`;
      }
      await ctx.reply(errorMsg);
    }
    // –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    session.sentenceTaskIndex = idx + 1;
    if (session.sentenceTaskIndex < words.length) {
      await ctx.reply(`–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: "${words[session.sentenceTaskIndex].word}". –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:`);
    } else {
      // –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º story_task
      const storyWords = (session.lastWordsToRepeat || session.wordsToRepeat || session.sentenceTaskWords || []).map(w => w.word);
      if (storyWords.length > 0) {
        session.storyTaskWords = storyWords;
        session.step = 'story_task';
        // –Ø–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞
        await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω—ã. –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...');
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É
        await generateStoryTaskContent(session, ctx);
      } else {
        session.step = 'main_menu';
        delete session.sentenceTaskWords;
        delete session.sentenceTaskIndex;
        await ctx.reply('–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', { reply_markup: mainMenu });
      }
    }
    return;
  }

  // --- Story quiz ---
  if (step === 'story_quiz') {
    const idx = session.storyQuestionIndex || 0;
    const questions = session.storyQuestions || [];
    if (!Array.isArray(questions) || !questions.length) {
      session.step = 'sentence_task';
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.', { reply_markup: mainMenu });
      return;
    }
    if (idx >= questions.length) {
      session.step = 'main_menu';
      delete session.storyText;
      delete session.storyQuestions;
      delete session.storyQuestionIndex;
      delete session.storyTaskWords;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞
      const relaxTip = getRandomRelaxTip();
      const congratsMessage = `üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b> –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\nüí° <b>–í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Å –ø–æ–ª—å–∑–æ–π:</b>\n${relaxTip}`;
      
      return ctx.reply(congratsMessage, { 
        parse_mode: 'HTML',
        reply_markup: mainMenu 
      });
    }
    const q = questions[idx];
    if (!Array.isArray(q.options) || !q.options.length) {
      session.step = 'sentence_task';
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.', { reply_markup: mainMenu });
      return;
    }
    if (!q.options.includes(text)) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', {
        reply_markup: Keyboard.from(q.options.map(opt => [opt]), { one_time_keyboard: true, resize_keyboard: true })
      });
    }
    if (text === q.correct_option) {
      await ctx.reply('‚úÖ –í–µ—Ä–Ω–æ!');
    } else {
      await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${q.correct_option}`);
    }
    session.storyQuestionIndex = idx + 1;
    if (session.storyQuestionIndex < questions.length) {
      const nextQ = questions[session.storyQuestionIndex];
      if (!Array.isArray(nextQ.options) || !nextQ.options.length) {
        session.step = 'sentence_task';
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.', { reply_markup: mainMenu });
        return;
      }
      await ctx.reply(`–í–æ–ø—Ä–æ—Å ${session.storyQuestionIndex + 1}/${questions.length}: ${nextQ.question}`, {
        reply_markup: Keyboard.from(nextQ.options.map(opt => [opt]), { one_time_keyboard: true, resize_keyboard: true })
      });
    } else {
      session.step = 'main_menu';
      delete session.storyText;
      delete session.storyQuestions;
      delete session.storyQuestionIndex;
      delete session.storyTaskWords;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞
      const relaxTip = getRandomRelaxTip();
      const congratsMessage = `üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</b> –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\nüí° <b>–í—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Å –ø–æ–ª—å–∑–æ–π:</b>\n${relaxTip}`;
      
      await ctx.reply(congratsMessage, { 
        parse_mode: 'HTML',
        reply_markup: mainMenu 
      });
    }
    return;
  }

  // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
  return ctx.reply('–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /menu.', {
    reply_markup: mainMenu,
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.api.setMyCommands([
  { command: 'menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
  { command: 'start', description: '–ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: 'words', description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ª–æ–≤–∞' },
  { command: 'sections', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã' },
  { command: 'achievements', description: '–õ–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è' },
  { command: 'reminder', description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' },
  { command: 'delete', description: '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ' },
  { command: 'clear', description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞' },
  { command: 'backup', description: 'üì¶ –°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø' },
  { command: 'backups', description: 'üìÇ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤' },
  { command: 'checkdb', description: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö' },
]);

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
async function safeDeleteWord(profile, word, translation) {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏-–±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const wordToDelete = await prisma.word.findFirst({
      where: { profile, word, translation }
    });
    
    if (wordToDelete) {
      const backupEntry = {
        timestamp: new Date().toISOString(),
        action: 'DELETE',
        word: wordToDelete
      };
      
      const deleteLogFile = `delete-log-${new Date().toISOString().split('T')[0]}.json`;
      let deleteLog = [];
      
      if (fs.existsSync(deleteLogFile)) {
        deleteLog = JSON.parse(fs.readFileSync(deleteLogFile, 'utf8'));
      }
      
      deleteLog.push(backupEntry);
      fs.writeFileSync(deleteLogFile, JSON.stringify(deleteLog, null, 2));
      
      console.log(`üìù Word deletion logged: ${word} -> ${deleteLogFile}`);
    }
    
    return await prisma.word.deleteMany({
      where: { profile, word, translation }
    });
  } catch (error) {
    console.error('Safe delete error:', error);
    throw error;
  }
}

// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞
const http = require('http');
const PORT = process.env.PORT || 10000;

http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Bot is alive');
}).listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

// --- –°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–æ–≤ ---

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
async function createBackup() {
  try {
    console.log('üîÑ Starting backup creation...');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backups –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const backupDir = 'backups';
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir);
      console.log(`üìÅ Created backup directory: ${backupDir}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã
    console.log('üìä Fetching words from database...');
    const allWords = await prisma.word.findMany({
      orderBy: { createdAt: 'asc' }
    });
    console.log(`üìä Found ${allWords.length} words in database`);
    
    const backupData = {
      timestamp: new Date().toISOString(),
      totalWords: allWords.length,
      words: allWords
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–ø–∫—É backups
    const backupFileName = `${backupDir}/backup-${timestamp}.json`;
    console.log(`üíæ Writing backup file: ${backupFileName}`);
    
    try {
      fs.writeFileSync(backupFileName, JSON.stringify(backupData, null, 2));
      console.log(`‚úÖ Backup file created successfully: ${backupFileName}`);
    } catch (fileError) {
      console.error('‚ùå File write error:', fileError);
      throw new Error(`Failed to write backup file: ${fileError.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(backupFileName)) {
      throw new Error(`Backup file was not created: ${backupFileName}`);
    }
    
    console.log(`‚úÖ Backup created: ${backupFileName} (${allWords.length} words)`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const adminUserId = Object.keys(sessions).find(id => 
      sessions[id].profile === '–ù—É—Ä–±–æ–ª–∞—Ç' || sessions[id].profile === '–ê–º–∏–Ω–∞'
    );
    
    if (adminUserId) {
      console.log(`üì® Sending backup to admin: ${adminUserId}`);
      try {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Buffer
        const fileBuffer = fs.readFileSync(backupFileName);
        
        await bot.api.sendDocument(adminUserId, new InputFile(fileBuffer, backupFileName), {
          caption: `üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nüïê ${new Date().toLocaleString('ru')}\nüìä –°–ª–æ–≤ –≤ –±–∞–∑–µ: ${allWords.length}`
        });
        console.log('‚úÖ Backup sent to admin successfully');
      } catch (sendError) {
        console.error('‚ùå Failed to send backup to admin:', sendError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
      }
    } else {
      console.log('‚ö†Ô∏è No admin user found to send backup');
    }
    
    return backupFileName;
  } catch (error) {
    console.error('‚ùå Backup failed:', error);
    console.error('‚ùå Error details:', error.message);
    console.error('‚ùå Error stack:', error.stack);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞
async function restoreFromBackup(backupFilePath) {
  try {
    const backupData = JSON.parse(fs.readFileSync(backupFilePath, 'utf8'));
    
    console.log(`üîÑ Restoring from backup: ${backupData.totalWords} words`);
    
    for (const word of backupData.words) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ
      const existing = await prisma.word.findFirst({
        where: {
          profile: word.profile,
          word: word.word,
          translation: word.translation
        }
      });
      
      if (!existing) {
        await prisma.word.create({
          data: {
            profile: word.profile,
            word: word.word,
            translation: word.translation,
            section: word.section,
            correct: word.correct,
            createdAt: word.createdAt,
            updatedAt: word.updatedAt
          }
        });
      }
    }
    
    console.log(`‚úÖ Backup restored successfully`);
    return true;
  } catch (error) {
    console.error('‚ùå Restore failed:', error);
    return false;
  }
}

// --- –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ streak ---

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
function getRandomReminder(remindersArray) {
  return remindersArray[Math.floor(Math.random() * remindersArray.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async function sendRemindersToUsers(reminderType) {
  const today = new Date().toDateString();
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userProfiles = await prisma.userProfile.findMany();
    
    for (const userProfile of userProfiles) {
      const telegramId = parseInt(userProfile.telegramId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–ª –ª–∏ —É–∂–µ —É–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
      const didSmartRepeatToday = userProfile.lastSmartRepeatDate === today;
      if (didSmartRepeatToday) continue;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      let reminderText;
      switch (reminderType) {
        case '6h':
          reminderText = getRandomReminder(REMINDERS_6H);
          break;
        case '3h':
          reminderText = getRandomReminder(REMINDERS_3H);
          break;
        case '1h':
          reminderText = getRandomReminder(REMINDERS_1H);
          break;
        default:
          continue;
      }
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const quickMenu = new Keyboard()
          .text('üß† –£–º–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ')
          .row();
          
        await bot.api.sendMessage(telegramId, reminderText, {
          reply_markup: quickMenu
        });
        
        console.log(`Reminder sent to user ${telegramId}: ${reminderType}`);
      } catch (error) {
        console.error(`Failed to send reminder to user ${telegramId}:`, error);
      }
    }
  } catch (error) {
    console.error('Error in sendRemindersToUsers:', error);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron-–∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
// –ó–∞ 6 —á–∞—Å–æ–≤ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ (18:00)
cron.schedule('0 18 * * *', () => {
  console.log('Sending 6-hour reminders...');
  sendRemindersToUsers('6h');
}, {
  timezone: "Asia/Yekaterinburg" // GMT+5
});

// –ó–∞ 3 —á–∞—Å–∞ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ (21:00)
cron.schedule('0 21 * * *', () => {
  console.log('Sending 3-hour reminders...');
  sendRemindersToUsers('3h');
}, {
  timezone: "Asia/Yekaterinburg" // GMT+5
});

// –ó–∞ 1 —á–∞—Å –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ (23:00)
cron.schedule('0 23 * * *', () => {
  console.log('Sending 1-hour reminders...');
  sendRemindersToUsers('1h');
}, {
  timezone: "Asia/Yekaterinburg" // GMT+5
});

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –≤ 2:00 –Ω–æ—á–∏
cron.schedule('0 2 * * *', () => {
  console.log('ÔøΩ Creating daily backup...');
  createBackup();
}, {
  timezone: "Asia/Yekaterinburg" // GMT+5
});

console.log('ÔøΩüîî Reminder system initialized!');
console.log('üì¶ Daily backup system initialized!');

bot.catch((err) => console.error('Bot error:', err));
// --- –°–∏—Å—Ç–µ–º–∞ –º–∏–Ω–∏-–∏–≥—Ä ---

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥"
async function startQuizGame(ctx, session) {
  try {
    console.log('üéÆ Starting quiz game for user:', ctx.from.id);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!session.quizStats) {
      console.log('üìä Initializing quiz stats for user');
      session.quizStats = {
        gamesPlayed: 0,
        correctAnswers: 0,
        currentStreak: 0,
        bestStreak: 0,
        totalPoints: 0
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìö Getting user words for profile:', session.profile);
    const userWords = await getWords(session.profile);
    console.log('üìö Found words:', userWords.length);
    
    if (userWords.length === 0) {
      console.log('‚ùå No words found for user');
      session.step = 'word_tasks_menu';
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å–Ω–∞—á–∞–ª–∞!', {
        reply_markup: wordTasksMenu,
      });
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –∏–≥—Ä–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if (!session.currentQuizSession) {
      // –í—ã–±–∏—Ä–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
      const shuffledWords = [...userWords].sort(() => Math.random() - 0.5);
      const selectedWords = shuffledWords.slice(0, Math.min(10, userWords.length));
      
      session.currentQuizSession = {
        words: selectedWords,
        currentQuestionIndex: 0,
        correctAnswersInSession: 0,
        startTime: Date.now()
      };
      
      console.log(`üéØ Created new quiz session with ${selectedWords.length} words`);
    }
    
    const quizSession = session.currentQuizSession;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    if (quizSession.currentQuestionIndex >= quizSession.words.length) {
      // –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      return await finishQuizSession(ctx, session);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    const targetWord = quizSession.words[quizSession.currentQuestionIndex];
    console.log(`üéØ Question ${quizSession.currentQuestionIndex + 1}/${quizSession.words.length}: ${targetWord.word} -> ${targetWord.translation}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    console.log('üîÑ Generating quiz options...');
    const options = await generateQuizOptions(targetWord, userWords);
    console.log('‚úÖ Generated options:', options);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
    session.currentQuiz = {
      targetWord: targetWord,
      correctAnswer: targetWord.translation,
      options: options,
      startTime: Date.now()
    };
    
    session.step = 'quiz_game';
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    const quizKeyboard = new Keyboard();
    options.forEach((option, index) => {
      quizKeyboard.text(`${index + 1}Ô∏è‚É£ ${option}`).row();
    });
    quizKeyboard.text('‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã').row();
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    const message = `üéØ <b>–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥!</b>\n\n` +
      `ÔøΩ <b>–í–æ–ø—Ä–æ—Å ${quizSession.currentQuestionIndex + 1} –∏–∑ ${quizSession.words.length}</b>\n` +
      `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ:</b> ${quizSession.correctAnswersInSession}\n\n` +
      `ÔøΩüìù <b>–°–ª–æ–≤–æ:</b> <code>${targetWord.word}</code>\n\n` +
      `ü§î –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:`;
    console.log('üì§ Sending quiz message to user...');
    
    return ctx.reply(message, { 
      reply_markup: quizKeyboard,
      parse_mode: 'HTML'
    });
    
  } catch (error) {
    console.error('‚ùå Quiz game error:', error);
    console.error('‚ùå Error stack:', error.stack);
    session.step = 'word_tasks_menu';
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
      reply_markup: wordTasksMenu,
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function generateQuizOptions(targetWord, userWords) {
  const options = [targetWord.translation];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const otherUserWords = userWords.filter(w => w.id !== targetWord.id && w.translation !== targetWord.translation);
  const wrongOptions = [];
  
  // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  while (wrongOptions.length < 2 && otherUserWords.length > 0) {
    const randomWord = otherUserWords[Math.floor(Math.random() * otherUserWords.length)];
    if (!wrongOptions.includes(randomWord.translation)) {
      wrongOptions.push(randomWord.translation);
    }
    otherUserWords.splice(otherUserWords.indexOf(randomWord), 1);
  }
  
  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ Oxford 3000
  if (wrongOptions.length < 3) {
    const oxfordTranslations = oxford3000
      .filter(w => w.translation && w.translation !== targetWord.translation && !wrongOptions.includes(w.translation))
      .map(w => w.translation);
    
    while (wrongOptions.length < 3 && oxfordTranslations.length > 0) {
      const randomTranslation = oxfordTranslations[Math.floor(Math.random() * oxfordTranslations.length)];
      if (!wrongOptions.includes(randomTranslation)) {
        wrongOptions.push(randomTranslation);
      }
      oxfordTranslations.splice(oxfordTranslations.indexOf(randomTranslation), 1);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É
  options.push(...wrongOptions);
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
  return options.sort(() => Math.random() - 0.5);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
async function handleQuizAnswer(ctx, session, answerText) {
  const quiz = session.currentQuiz;
  const quizSession = session.currentQuizSession;
  if (!quiz || !quizSession) return false;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const answerMatch = answerText.match(/^([1-4])Ô∏è‚É£\s(.+)$/);
  if (!answerMatch) return false;
  
  const selectedAnswer = answerMatch[2];
  const isCorrect = selectedAnswer === quiz.correctAnswer;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–Ω–µ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - –æ–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ)
  if (isCorrect) {
    quizSession.correctAnswersInSession++;
    session.quizStats.correctAnswers++;
    session.quizStats.currentStreak++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é —Å–µ—Ä–∏—é
    if (session.quizStats.currentStreak > session.quizStats.bestStreak) {
      session.quizStats.bestStreak = session.quizStats.currentStreak;
    }
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
    let points = 10;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é (–∫–∞–∂–¥—ã–µ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥)
    if (session.quizStats.currentStreak % 5 === 0) {
      points += 10;
    }
    
    session.quizStats.totalPoints += points;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      await prisma.word.update({
        where: { id: quiz.targetWord.id },
        data: { correct: quiz.targetWord.correct + 1 }
      });
    } catch (error) {
      console.error('Error updating word progress:', error);
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    let successMessage = `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> +${points} –æ—á–∫–æ–≤\n\n`;
    successMessage += `üìù <b>${quiz.targetWord.word}</b> ‚Äî ${quiz.correctAnswer}\n\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (quiz.targetWord.section) {
      successMessage += `üìÇ <b>–†–∞–∑–¥–µ–ª:</b> ${quiz.targetWord.section}\n`;
    }
    
    successMessage += `üî• <b>–°–µ—Ä–∏—è:</b> ${session.quizStats.currentStreak}\n`;
    successMessage += `‚≠ê <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> ${session.quizStats.totalPoints}\n\n`;
    
    // –û—Å–æ–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (session.quizStats.currentStreak === 5) {
      successMessage += `üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è!</b> –ë–æ–Ω—É—Å +10 –æ—á–∫–æ–≤!\n`;
    } else if (session.quizStats.currentStreak === 10) {
      successMessage += `üèÜ <b>–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–µ—Ä–∏—è!</b> –í—ã –Ω–∞ –æ–≥–Ω–µ!\n`;
    } else if (session.quizStats.currentStreak % 5 === 0 && session.quizStats.currentStreak > 10) {
      successMessage += `üíé <b>–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ä–∏—è ${session.quizStats.currentStreak}!</b> –ë–æ–Ω—É—Å +10 –æ—á–∫–æ–≤!\n`;
    }
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    const continueKeyboard = new Keyboard();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    if (quizSession.currentQuestionIndex + 1 < quizSession.words.length) {
      continueKeyboard.text('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
    } else {
      continueKeyboard.text('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É');
    }
    
    continueKeyboard.text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
      .row()
      .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º')
      .row();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    successMessage += `\nüìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> ${quizSession.currentQuestionIndex + 1}/${quizSession.words.length} –≤–æ–ø—Ä–æ—Å–æ–≤\n`;
    successMessage += `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ:</b> ${quizSession.correctAnswersInSession}`;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    quizSession.currentQuestionIndex++;
    
    session.step = 'quiz_continue';
    
    return ctx.reply(successMessage, {
      reply_markup: continueKeyboard,
      parse_mode: 'HTML'
    });
    
  } else {
    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    session.quizStats.currentStreak = 0;
    
    // –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      const newCorrect = Math.max(0, quiz.targetWord.correct - 1);
      await prisma.word.update({
        where: { id: quiz.targetWord.id },
        data: { correct: newCorrect }
      });
    } catch (error) {
      console.error('Error updating word progress:', error);
    }
    
    let failMessage = `‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n` +
      `üìù <b>${quiz.targetWord.word}</b> ‚Äî <b>${quiz.correctAnswer}</b>\n` +
      `üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${selectedAnswer}\n\n` +
      `üíî –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞\n` +
      `‚≠ê –û—á–∫–∏: ${session.quizStats.totalPoints}`;
    
    const continueKeyboard = new Keyboard();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    if (quizSession.currentQuestionIndex + 1 < quizSession.words.length) {
      continueKeyboard.text('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
    } else {
      continueKeyboard.text('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É');
    }
    
    continueKeyboard.text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
      .row()
      .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º')
      .row();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    failMessage += `\n\nüìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> ${quizSession.currentQuestionIndex + 1}/${quizSession.words.length} –≤–æ–ø—Ä–æ—Å–æ–≤\n`;
    failMessage += `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ:</b> ${quizSession.correctAnswersInSession}`;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    quizSession.currentQuestionIndex++;
    
    session.step = 'quiz_continue';
    
    return ctx.reply(failMessage, {
      reply_markup: continueKeyboard,
      parse_mode: 'HTML'
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function finishQuizSession(ctx, session) {
  const quizSession = session.currentQuizSession;
  const stats = session.quizStats;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  stats.gamesPlayed++;
  
  // –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const totalQuestions = quizSession.words.length;
  const correctAnswers = quizSession.correctAnswersInSession;
  const successRate = Math.round((correctAnswers / totalQuestions) * 100);
  const timeTaken = Math.round((Date.now() - quizSession.startTime) / 1000);
  
  // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
  let bonusPoints = 0;
  if (successRate >= 90) {
    bonusPoints = 50; // –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  } else if (successRate >= 70) {
    bonusPoints = 30; // –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  } else if (successRate >= 50) {
    bonusPoints = 15; // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  }
  
  stats.totalPoints += bonusPoints;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
  let resultMessage = `üèÅ <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n`;
  resultMessage += `üìä <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n`;
  resultMessage += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>${correctAnswers}</b> –∏–∑ <b>${totalQuestions}</b>\n`;
  resultMessage += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>${successRate}%</b>\n`;
  resultMessage += `‚è±Ô∏è –í—Ä–µ–º—è: <b>${timeTaken} —Å–µ–∫</b>\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö
  if (bonusPoints > 0) {
    resultMessage += `üéÅ <b>–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +${bonusPoints} –æ—á–∫–æ–≤!</b>\n\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (successRate >= 90) {
    resultMessage += `üåü <b>–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!</b> –í—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—Ç–µ —ç—Ç–∏ —Å–ª–æ–≤–∞!\n`;
  } else if (successRate >= 70) {
    resultMessage += `üëç <b>–•–æ—Ä–æ—à–æ!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n`;
  } else if (successRate >= 50) {
    resultMessage += `üí™ <b>–ù–µ–ø–ª–æ—Ö–æ!</b> –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.\n`;
  } else {
    resultMessage += `üìö <b>–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏!</b> –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç–∏ —Å–ª–æ–≤–∞.\n`;
  }
  
  resultMessage += `\n‚≠ê <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> ${stats.totalPoints}\n`;
  resultMessage += `üèÜ <b>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è:</b> ${stats.bestStreak}`;
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
  const finishKeyboard = new Keyboard()
    .text('üéØ –ù–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    .row()
    .text('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—è–º')
    .row();
  
  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
  delete session.currentQuizSession;
  session.step = 'quiz_continue';
  
  return ctx.reply(resultMessage, {
    reply_markup: finishKeyboard,
    parse_mode: 'HTML'
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initializeDatabase().then(() => {
  console.log('üöÄ Starting bot...');
  bot.start();
}).catch((error) => {
  console.error('‚ùå Failed to start bot:', error);
  process.exit(1);
});

