// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç—Ä—É–¥–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —ç—Ç–∞–ø–æ–≤ 1 –∏ 3 –¥–ª—è —ç—Ç–∞–ø–∞ 5
console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç—Ä—É–¥–Ω—ã—Ö —Å–ª–æ–≤...\n');

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const mockSession = {
  profile: 'test_user',
  smartRepeatWords: [
    { word: 'apple', translation: '—è–±–ª–æ–∫–æ', correct: 2 },
    { word: 'book', translation: '–∫–Ω–∏–≥–∞', correct: 1 },
    { word: 'car', translation: '–º–∞—à–∏–Ω–∞', correct: 3 },
    { word: 'dog', translation: '—Å–æ–±–∞–∫–∞', correct: 0 },
    { word: 'house', translation: '–¥–æ–º', correct: 2 }
  ]
};

console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ —É–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:', mockSession.smartRepeatWords.map(w => w.word));

// –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Ç—Ä—É–¥–Ω—ã—Ö —Å–ª–æ–≤
console.log('\n‚úÖ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞');
mockSession.difficultWords = [];
console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ difficultWords:', mockSession.difficultWords);

// –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —ç—Ç–∞–ø–∞ 1 (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞)
console.log('\n‚úÖ –¢–µ—Å—Ç 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ (—ç—Ç–∞–ø 1)');

function simulateStage1WrongAnswer(session, word) {
  if (!session.difficultWords) {
    session.difficultWords = [];
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
  const alreadyAdded = session.difficultWords.find(w => w.word === word.word);
  if (!alreadyAdded) {
    session.difficultWords.push({
      word: word.word,
      translation: word.translation,
      correct: word.correct,
      source: 'stage1_quiz'
    });
    console.log(`Added difficult word from Stage 1: ${word.word} (total: ${session.difficultWords.length})`);
  }
}

// –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
simulateStage1WrongAnswer(mockSession, mockSession.smartRepeatWords[1]); // book
simulateStage1WrongAnswer(mockSession, mockSession.smartRepeatWords[3]); // dog

// –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ —ç—Ç–∞–ø–∞ 3 ("–∑–Ω–∞—é/–Ω–µ –∑–Ω–∞—é")
console.log('\n‚úÖ –¢–µ—Å—Ç 3: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —ç—Ç–∞–ø–µ "–∑–Ω–∞—é/–Ω–µ –∑–Ω–∞—é" (—ç—Ç–∞–ø 3)');

function simulateStage3WrongAnswer(session, word) {
  if (!session.difficultWords) {
    session.difficultWords = [];
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
  const alreadyAdded = session.difficultWords.find(w => w.word === word.word);
  if (!alreadyAdded) {
    session.difficultWords.push({
      word: word.word,
      translation: word.translation,
      correct: word.correct,
      source: 'stage3_know_dont_know'
    });
    console.log(`Added difficult word from Stage 3: ${word.word} (total: ${session.difficultWords.length})`);
  }
}

// –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —ç—Ç–∞–ø–µ 3
simulateStage3WrongAnswer(mockSession, mockSession.smartRepeatWords[0]); // apple  
simulateStage3WrongAnswer(mockSession, mockSession.smartRepeatWords[1]); // book (–¥—É–±–ª–∏–∫–∞—Ç - –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è)
simulateStage3WrongAnswer(mockSession, mockSession.smartRepeatWords[4]); // house

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
console.log('\n‚úÖ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
console.log('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å "book" –µ—â–µ —Ä–∞–∑ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ)...');
simulateStage1WrongAnswer(mockSession, mockSession.smartRepeatWords[1]); // book –µ—â–µ —Ä–∞–∑

// –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —ç—Ç–∞–ø–∞ 5 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä—É–¥–Ω—ã—Ö —Å–ª–æ–≤
console.log('\n‚úÖ –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —ç—Ç–∞–ø–∞ 5');

function simulateStage5WordSelection(session) {
  console.log('=== SMART REPEAT STAGE 5 SIMULATION ===');
  console.log('Session difficultWords:', session.difficultWords?.length || 0);
  
  let words = [];
  
  if (session.difficultWords && session.difficultWords.length > 0) {
    words = session.difficultWords;
    console.log(`Using ${words.length} difficult words from stages 1 and 3:`, words.map(w => w.word));
    
    // –ï—Å–ª–∏ —Ç—Ä—É–¥–Ω—ã—Ö —Å–ª–æ–≤ –º–µ–Ω—å—à–µ 10, –¥–æ–ø–æ–ª–Ω—è–µ–º
    if (words.length < 10) {
      console.log('Adding more words to reach minimum of 10...');
      const existingWords = words.map(w => w.word);
      const additionalWords = session.smartRepeatWords
        .filter(w => !existingWords.includes(w.word))
        .slice(0, 10 - words.length);
      
      words = words.concat(additionalWords);
      console.log(`Added ${additionalWords.length} additional words. Total: ${words.length}`);
    }
  } else {
    console.log('No difficult words found, would use priority-based selection...');
  }
  
  return words;
}

const stage5Words = simulateStage5WordSelection(mockSession);

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
console.log('============================');
console.log('üìä –¢—Ä—É–¥–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω—ã:', mockSession.difficultWords);
console.log('üìù –°–ª–æ–≤–∞ –¥–ª—è —ç—Ç–∞–ø–∞ 5:', stage5Words.map(w => ({word: w.word, source: w.source || 'additional'})));

console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:');
console.log('‚Ä¢ –ú–∞—Å—Å–∏–≤ difficultWords –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —É–º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è');
console.log('‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–∞–ø–∞ 1 (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞) —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');  
console.log('‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–∞–ø–∞ 3 ("–∑–Ω–∞—é/–Ω–µ –∑–Ω–∞—é") —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
console.log('‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç—Å—è');
console.log('‚Ä¢ –≠—Ç–∞–ø 5 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω—ã–µ —Å–ª–æ–≤–∞');
console.log('‚Ä¢ –ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑ –æ–±—â–µ–≥–æ –ø—É–ª–∞');

console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ!');