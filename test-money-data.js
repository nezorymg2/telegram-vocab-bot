// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
require('dotenv').config({ path: __dirname + '/.env' });
const prisma = require('./database');

async function testMoneySystemData() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É money_system
    console.log('üìã –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã money_system:');
    const records = await prisma.$queryRaw`SELECT * FROM "money_system" ORDER BY "profileName"`;
    
    records.forEach(record => {
      console.log(`${record.profileName}:`);
      console.log(`  ‚úÖ totalEarned: ${record.totalEarned}`);
      console.log(`  ‚ùå totalOwed: ${record.totalOwed}`);
      console.log(`  üìÖ dailyCompletions: ${record.dailyCompletions}`);
      console.log(`  ‚è≠Ô∏è dailyMissed: ${record.dailyMissed}`);
      console.log(`  üë• bothMissedDays: ${record.bothMissedDays || '–ù–ï–¢ –ü–û–õ–Ø!'}`);
      console.log(`  üïê lastCompletionDate: ${record.lastCompletionDate}`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É shared_bank
    console.log('üè¶ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã shared_bank:');
    const currentMonth = new Date().toISOString().substring(0, 7);
    const bankRecords = await prisma.$queryRaw`
      SELECT * FROM "shared_bank" WHERE "month" = ${currentMonth}
    `;
    
    if (bankRecords.length > 0) {
      const bank = bankRecords[0];
      console.log(`üí∞ totalAmount: ${bank.totalAmount}`);
      console.log(`üìÖ month: ${bank.month}`);
      console.log(`üïê lastUpdated: ${bank.lastUpdated}`);
    } else {
      console.log('‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ shared_bank –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã money_system
    console.log('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã money_system:');
    const tableInfo = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'money_system'
      ORDER BY ordinal_position
    `;
    
    tableInfo.forEach(col => {
      console.log(`  ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testMoneySystemData();